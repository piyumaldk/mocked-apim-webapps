openapi: 3.0.1
info:
  title: WSO2 API Manager - Admin
  description: |
    This document specifies a **RESTful API** for WSO2 **API Manager** - **Admin Portal**.
    Please see [full OpenAPI Specification](https://raw.githubusercontent.com/wso2/carbon-apimgt/master/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin.v1/src/main/resources/admin-api.yaml) of the API which is written using [OAS 3.0](http://swagger.io/) specification.

    # Authentication
    The Admin REST API is protected using OAuth2 and access control is achieved through scopes. Before you start invoking
    the the API you need to obtain an access token with the required scopes. This guide will walk you through the steps
    that you will need to follow to obtain an access token.
    First you need to obtain the consumer key/secret key pair by calling the dynamic client registration (DCR) endpoint. You can add your preferred grant types
    in the payload. A sample payload is shown below.
    ```
      {
      "callbackUrl":"www.example.com",
      "clientName":"rest_api_admin",
      "owner":"admin",
      "grantType":"client_credentials password refresh_token",
      "saasApp":true
      }
    ```
    Create a file (payload.json) with the above sample payload, and use the cURL shown bellow to invoke the DCR endpoint. Authorization header of this should contain the
    base64 encoded admin username and password.
    **Format of the request**
    ```
      curl -X POST -H "Authorization: Basic Base64(admin_username:admin_password)" -H "Content-Type: application/json"
      \ -d @payload.json https://<host>:<servlet_port>/client-registration/v0.17/register
    ```
    **Sample request**
    ```
      curl -X POST -H "Authorization: Basic YWRtaW46YWRtaW4=" -H "Content-Type: application/json"
      \ -d @payload.json https://localhost:9443/client-registration/v0.17/register
    ```
    Following is a sample response after invoking the above curl.
    ```
    {
    "clientId": "fOCi4vNJ59PpHucC2CAYfYuADdMa",
    "clientName": "rest_api_admin",
    "callBackURL": "www.example.com",
    "clientSecret": "a4FwHlq0iCIKVs2MPIIDnepZnYMa",
    "isSaasApplication": true,
    "appOwner": "admin",
    "jsonString": "{\"grant_types\":\"client_credentials password refresh_token\",\"redirect_uris\":\"www.example.com\",\"client_name\":\"rest_api_admin\"}",
    "jsonAppAttribute": "{}",
    "tokenType": null
    }
    ```
    Next you must use the above client id and secret to obtain the access token.
    We will be using the password grant type for this, you can use any grant type you desire.
    You also need to add the proper **scope** when getting the access token. All possible scopes for Admin REST API can be viewed in **OAuth2 Security** section
    of this document and scope for each resource is given in **authorizations** section of resource documentation.
    Following is the format of the request if you are using the password grant type.
    ```
    curl -k -d "grant_type=password&username=<admin_username>&password=<admin_passowrd>&scope=<scopes seperated by space>"
    \ -H "Authorization: Basic base64(cliet_id:client_secret)"
    \ https://<host>:<server_port>/oauth2/token
    ```
    **Sample request**
    ```
    curl https://localhost:9443/oauth2/token -k \
    -H "Authorization: Basic Zk9DaTR2Tko1OVBwSHVjQzJDQVlmWXVBRGRNYTphNEZ3SGxxMGlDSUtWczJNUElJRG5lcFpuWU1h" \
    -d "grant_type=password&username=admin&password=admin&scope=apim:admin apim:tier_view"
    ```
    Shown below is a sample response to the above request.
    ```
    {
    "access_token": "e79bda48-3406-3178-acce-f6e4dbdcbb12",
    "refresh_token": "a757795d-e69f-38b8-bd85-9aded677a97c",
    "scope": "apim:admin apim:tier_view",
    "token_type": "Bearer",
    "expires_in": 3600
    }
    ```
    Now you have a valid access token, which you can use to invoke an API.
    Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header.
    If you use a different authentication mechanism, this process may change.

    # Try out in Postman
    If you want to try-out the embedded postman collection with "Run in Postman" option, please follow the guidelines listed below.
    * All of the OAuth2 secured endpoints have been configured with an Authorization Bearer header with a parameterized access token. Before invoking any REST API resource make sure you run the `Register DCR Application` and `Generate Access Token` requests to fetch an access token with all required scopes.
    * Make sure you have an API Manager instance up and running.
    * Update the `basepath` parameter to match the hostname and port of the APIM instance.

    [![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/17491134-b263aa69-7494-4fc5-90fa-daa2f63880ae)
  contact:
    name: WSO2
    url: https://wso2.com/api-manager/
    email: architecture@wso2.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v3
servers:
- url: https://virtserver.swaggerhub.com/chanaka3d/wso-2_api_manager_admin/v3
  description: SwaggerHub API Auto Mocking
paths:
  /throttling/policies/search:
    get:
      tags:
      - Unified Search
      summary: |
        Retrieve/Search Throttling Policies
      description: |
        This operation provides you a list of available Throttling Policies qualifying the given keyword match.
      operationId: throttlingPolicySearch
      parameters:
      - name: query
        in: query
        description: |
          **Search**.
          You can search by providing a keyword. Allowed to search by type and name only.
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            List of qualifying Throttling Policies is returned.
          headers:
            Content-Type:
              description: The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThrottlePolicyDetailsList'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/search?query=type:sub\""
      x-swagger-router-controller: UnifiedSearch
  /throttling/policies/application:
    get:
      tags:
      - Application Policy (Collection)
      summary: Get all Application Throttling Policies
      description: |
        Retrieves all existing application throttling policies.
      operationId: throttlingPoliciesApplicationGET
      parameters:
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      responses:
        "200":
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicyList'
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/application\""
      x-swagger-router-controller: ApplicationPolicyCollection
    post:
      tags:
      - Application Policy (Collection)
      summary: Add an Application Throttling Policy
      description: |
        This operation can be used to add a new application level throttling policy.
      operationId: throttlingPoliciesApplicationPOST
      parameters:
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Application level policy object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationThrottlePolicy'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
              example:
                policyId: e0fd4a15-969e-4056-94c8-8a7b56f8103f
                policyName: 20PerMin
                displayName: 20PerMin
                description: Allows 20 request per minute
                isDeployed: true
                type: ApplicationThrottlePolicy
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 20
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "415":
          description: Unsupported Media Type. The entity of the request was not in
            a supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 415
                message: Unsupported media type
                description: The entity of the request was not in a supported format
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/application\""
      x-swagger-router-controller: ApplicationPolicyCollection
  /throttling/policies/application/{policyId}:
    get:
      tags:
      - Application Policy (Individual)
      summary: Get an Application Throttling Policy
      description: |
        Retrieves an application throttling policy.
      operationId: throttlingPoliciesApplicationPolicyIdGET
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
              example:
                policyId: e0fd4a15-969e-4056-94c8-8a7b56f8103f
                policyName: 20PerMin
                displayName: 20PerMin
                description: Allows 20 request per minute
                isDeployed: true
                type: ApplicationThrottlePolicy
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 20
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/application/4e098fff-7f94-459a-981f-d257332f69d0\""
      x-swagger-router-controller: ApplicationPolicyIndividual
    put:
      tags:
      - Application Policy (Individual)
      summary: Update an Application Throttling policy
      description: |
        Updates an existing application level throttling policy. Upon a succesfull update, you will receive the updated application policy as the response.
      operationId: throttlingPoliciesApplicationPolicyIdPUT
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Policy object that needs to be modified
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationThrottlePolicy'
        required: true
      responses:
        "200":
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationThrottlePolicy'
              example:
                policyId: e0fd4a15-969e-4056-94c8-8a7b56f8103f
                policyName: 20PerMin
                displayName: 20PerMin
                description: Allows 20 request per minute
                isDeployed: true
                type: ApplicationThrottlePolicy
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 20
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/application/4e098fff-7f94-459a-981f-d257332f69d0\""
      x-swagger-router-controller: ApplicationPolicyIndividual
    delete:
      tags:
      - Application Policy (Individual)
      summary: Delete an Application Throttling policy
      description: |
        Deletes an application level throttling policy.
      operationId: throttlingPoliciesApplicationPolicyIdDELETE
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/application/4e098fff-7f94-459a-981f-d257332f69d0\""
      x-swagger-router-controller: ApplicationPolicyIndividual
  /throttling/policies/subscription:
    get:
      tags:
      - Subscription Policy (Collection)
      summary: Get all Subscription Throttling Policies
      description: |
        This operation can be used to retrieve all Subscription level throttling policies.
      operationId: throttlingPoliciesSubscriptionGET
      parameters:
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      responses:
        "200":
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicyList'
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/subscription\""
      x-swagger-router-controller: SubscriptionPolicyCollection
    post:
      tags:
      - Subscription Policy (Collection)
      summary: Add a Subscription Throttling Policy
      description: |
        This operation can be used to add a Subscription level throttling policy specifying the details of the policy in the payload.
      operationId: throttlingPoliciesSubscriptionPOST
      parameters:
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Subscripion level policy object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Policy object.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
              example:
                policyId: 78c3ebff-176d-40d8-9377-fb3276528291
                policyName: Gold
                displayName: Gold
                description: Allows 5000 requests per minute
                isDeployed: true
                graphQLMaxComplexity: 0
                graphQLMaxDepth: 0
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 5000
                rateLimitCount: 0
                customAttributes: []
                stopOnQuotaReach: true
                billingPlan: FREE
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "415":
          description: Unsupported Media Type. The entity of the request was not in
            a supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 415
                message: Unsupported media type
                description: The entity of the request was not in a supported format
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/subscription\""
      x-swagger-router-controller: SubscriptionPolicyCollection
  /throttling/policies/subscription/{policyId}:
    get:
      tags:
      - Subscription Policy (Individual)
      summary: Get a Subscription Policy
      description: |
        This operation can be used to retrieves subscription level throttling policy by specifying the Id of the policy as a path paramter
      operationId: throttlingPoliciesSubscriptionPolicyIdGET
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
              example:
                policyId: 78c3ebff-176d-40d8-9377-fb3276528291
                policyName: Gold
                displayName: Gold
                description: Allows 5000 requests per minute
                isDeployed: true
                graphQLMaxComplexity: 0
                graphQLMaxDepth: 0
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 5000
                rateLimitCount: 0
                customAttributes: []
                stopOnQuotaReach: true
                billingPlan: FREE
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/subscription/c948c723-71dd-4d50-8c77-0a0e99c8cbb1\""
      x-swagger-router-controller: SubscriptionPolicyIndividual
    put:
      tags:
      - Subscription Policy (Individual)
      summary: Update a Subscription Policy
      description: |
        Updates an existing subscription level throttling policy.
      operationId: throttlingPoliciesSubscriptionPolicyIdPUT
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Policy object that needs to be modified
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionThrottlePolicy'
        required: true
      responses:
        "200":
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionThrottlePolicy'
              example:
                policyId: 78c3ebff-176d-40d8-9377-fb3276528291
                policyName: Gold
                displayName: Gold
                description: Allows 5000 requests per minute
                isDeployed: true
                graphQLMaxComplexity: 0
                graphQLMaxDepth: 0
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 5000
                rateLimitCount: 0
                customAttributes: []
                stopOnQuotaReach: true
                billingPlan: FREE
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/subscription/c948c723-71dd-4d50-8c77-0a0e99c8cbb1\""
      x-swagger-router-controller: SubscriptionPolicyIndividual
    delete:
      tags:
      - Subscription Policy (Individual)
      summary: Delete a Subscription Policy
      description: |
        This operation can be used to delete a subscription level throttling policy by specifying the Id of the policy as a path paramter.
      operationId: throttlingPoliciesSubscriptionPolicyIdDELETE
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/subscription/c948c723-71dd-4d50-8c77-0a0e99c8cbb1\""
      x-swagger-router-controller: SubscriptionPolicyIndividual
  /throttling/policies/custom:
    get:
      tags:
      - Custom Rules (Collection)
      summary: Get all Custom Rules
      description: |
        Retrieves all custom rules.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      operationId: throttlingPoliciesCustomGET
      parameters:
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      responses:
        "200":
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRuleList'
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/custom\""
      x-swagger-router-controller: CustomRulesCollection
    post:
      tags:
      - Custom Rules (Collection)
      summary: Add a Custom Rule
      description: |
        Adds a new custom rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      operationId: throttlingPoliciesCustomPOST
      parameters:
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Custom Rule object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRule'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
              example:
                policyId: 7c7ed7c4-5a7c-4e08-850a-a95bbfcc2fb6
                policyName: custom
                description: Allow 10 requests per minute for admin user
                isDeployed: true
                siddhiQuery: "FROM RequestStream\nSELECT userId, ( userId == 'admin@carbon.super'\
                  \ ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\n\
                  INSERT INTO EligibilityStream; \n\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1\
                  \ min) \nSELECT throttleKey, (count(userId) >= 10) as isThrottled,\
                  \ expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into\
                  \ ResultStream;"
                keyTemplate: $userId
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "415":
          description: Unsupported Media Type. The entity of the request was not in
            a supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 415
                message: Unsupported media type
                description: The entity of the request was not in a supported format
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/custom\""
      x-swagger-router-controller: CustomRulesCollection
  /throttling/policies/custom/{ruleId}:
    get:
      tags:
      - Custom Rules (Individual)
      summary: Get a Custom Rule
      description: |
        Retrieves a custom rule. We need to provide the policy Id as a path parameter.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      operationId: throttlingPoliciesCustomRuleIdGET
      parameters:
      - name: ruleId
        in: path
        description: |
          Custom rule UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
              example:
                policyId: 7c7ed7c4-5a7c-4e08-850a-a95bbfcc2fb6
                policyName: custom
                description: Allow 10 requests per minute for admin user
                isDeployed: true
                siddhiQuery: "FROM RequestStream\nSELECT userId, ( userId == 'admin@carbon.super'\
                  \ ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\n\
                  INSERT INTO EligibilityStream; \n\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1\
                  \ min) \nSELECT throttleKey, (count(userId) >= 10) as isThrottled,\
                  \ expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into\
                  \ ResultStream;"
                keyTemplate: $userId
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4\""
      x-swagger-router-controller: CustomRulesIndividual
    put:
      tags:
      - Custom Rules (Individual)
      summary: Update a Custom Rule
      description: |
        Updates an existing custom rule.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      operationId: throttlingPoliciesCustomRuleIdPUT
      parameters:
      - name: ruleId
        in: path
        description: |
          Custom rule UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Policy object that needs to be modified
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRule'
        required: true
      responses:
        "200":
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRule'
              example:
                policyId: 7c7ed7c4-5a7c-4e08-850a-a95bbfcc2fb6
                policyName: custom
                description: Allow 10 requests per minute for admin user
                isDeployed: true
                siddhiQuery: "FROM RequestStream\nSELECT userId, ( userId == 'admin@carbon.super'\
                  \ ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\n\
                  INSERT INTO EligibilityStream; \n\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1\
                  \ min) \nSELECT throttleKey, (count(userId) >= 10) as isThrottled,\
                  \ expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into\
                  \ ResultStream;"
                keyTemplate: $userId
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4\""
      x-swagger-router-controller: CustomRulesIndividual
    delete:
      tags:
      - Custom Rules (Individual)
      summary: Delete a Custom Rule
      description: |
        Delete a custom rule. We need to provide the Id of the policy as a path parameter.

        **NOTE:**
        * Only super tenant users are allowed for this operation.
      operationId: throttlingPoliciesCustomRuleIdDELETE
      parameters:
      - name: ruleId
        in: path
        description: |
          Custom rule UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/custom/33662a62-8db1-4d75-af08-afd63c6bd0b4\""
      x-swagger-router-controller: CustomRulesIndividual
  /throttling/policies/advanced:
    get:
      tags:
      - Advanced Policy (Collection)
      summary: Get all Advanced Throttling Policies
      description: |
        Retrieves all existing advanced throttling policies.
      operationId: throttlingPoliciesAdvancedGET
      parameters:
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      responses:
        "200":
          description: |
            OK.
            Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicyList'
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/advanced\""
      x-swagger-router-controller: AdvancedPolicyCollection
    post:
      tags:
      - Advanced Policy (Collection)
      summary: Add an Advanced Throttling Policy
      description: |
        Add a new advanced throttling policy.
      operationId: throttlingPoliciesAdvancedPOST
      parameters:
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Advanced level policy object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedThrottlePolicy'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created Advanced Throttling Policy.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
              example:
                policyId: 4cf46441-a538-4f79-a499-ab81200c9bca
                policyName: 10KPerMin
                displayName: 10KPerMin
                description: Allows 10000 requests per minute
                isDeployed: true
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 10000
                conditionalGroups: []
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "415":
          description: Unsupported Media Type. The entity of the request was not in
            a supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 415
                message: Unsupported media type
                description: The entity of the request was not in a supported format
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/advanced\""
      x-swagger-router-controller: AdvancedPolicyCollection
  /throttling/policies/advanced/{policyId}:
    get:
      tags:
      - Advanced Policy (Individual)
      summary: Get an Advanced Throttling Policy
      description: |
        Retrieves an advanced throttling policy.
      operationId: throttlingPoliciesAdvancedPolicyIdGET
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Policy returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
              example:
                policyId: 4cf46441-a538-4f79-a499-ab81200c9bca
                policyName: 10KPerMin
                displayName: 10KPerMin
                description: Allows 10000 requests per minute
                isDeployed: true
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 10000
                conditionalGroups: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/advanced/229a3c46-c836-43c8-b988-8eebd9c7774b\""
      x-swagger-router-controller: AdvancedPolicyIndividual
    put:
      tags:
      - Advanced Policy (Individual)
      summary: Update an Advanced Throttling Policy
      description: |
        Updates an existing Advanced throttling policy.
      operationId: throttlingPoliciesAdvancedPolicyIdPUT
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Policy object that needs to be modified
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdvancedThrottlePolicy'
        required: true
      responses:
        "200":
          description: |
            OK.
            Policy updated.
          headers:
            Location:
              description: |
                The URL of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdvancedThrottlePolicy'
              example:
                policyId: 4cf46441-a538-4f79-a499-ab81200c9bca
                policyName: 10KPerMin
                displayName: 10KPerMin
                description: Allows 10000 requests per minute
                isDeployed: true
                defaultLimit:
                  type: REQUESTCOUNTLIMIT
                  requestCount:
                    timeUnit: min
                    unitTime: 1
                    requestCount: 10000
                conditionalGroups: []
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/advanced/229a3c46-c836-43c8-b988-8eebd9c7774b\""
      x-swagger-router-controller: AdvancedPolicyIndividual
    delete:
      tags:
      - Advanced Policy (Individual)
      summary: Delete an Advanced Throttling Policy
      description: |
        Deletes an advanced throttling policy.
      operationId: throttlingPoliciesAdvancedPolicyIdDELETE
      parameters:
      - name: policyId
        in: path
        description: |
          Thorttle policy UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/advanced/229a3c46-c836-43c8-b988-8eebd9c7774b\""
      x-swagger-router-controller: AdvancedPolicyIndividual
  /throttling/policies/export:
    get:
      tags:
      - Import Export
      summary: Export a Throttling Policy
      description: |
        This operation can be used to export the details of a particular Throttling Policy.
      operationId: exportThrottlingPolicy
      parameters:
      - name: policyId
        in: query
        description: UUID of the ThrottlingPolicy
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: name
        in: query
        description: |
          Throttling Policy Name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: type
        in: query
        description: |
          Type of the Throttling Policy
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - sub
          - app
          - api
          - global
      - name: format
        in: query
        description: |
          Format of output documents. Can be YAML or JSON.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - JSON
          - YAML
      responses:
        "200":
          description: |
            OK.
            Export Successful.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportThrottlePolicy'
              example:
                type: rate-limiting policy
                subtype: application
                version: v4.1.0
                data:
                  policyId: cd828243-a0db-430c-97e9-9e41fd865d48
                  policyName: 50PerMin
                  displayName: 50PerMin
                  description: Allows 50 request per minute
                  isDeployed: true
                  type: ApplicationThrottlePolicy
                  defaultLimit:
                    type: BANDWIDTHLIMIT
                    requestCount:
                      timeUnit: min
                      unitTime: 1
                      requestCount: 50
                    bandwidth:
                      timeUnit: min
                      unitTime: 5
                      dataAmount: 100
                      dataUnit: MB
                    eventCount:
                      timeUnit: min
                      unitTime: 5
                      eventCount: 16
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/export?policyId=96077508-fd01-4fae-bc64-5de0e2baf43c&name=Bronze&type=subscription&format=YAML\""
      x-swagger-router-controller: ImportExport
  /throttling/policies/import:
    post:
      tags:
      - Import Export
      summary: Import a Throttling Policy
      description: |
        This operation can be used to import a Throttling Policy
      operationId: importThrottlingPolicy
      parameters:
      - name: overwrite
        in: query
        description: |
          Update an existing throttlingpolicy with the same name
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/policies_import_body'
        required: true
      responses:
        "200":
          description: |
            Created.
            Throttling Policy Imported Successfully.
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "409":
          description: Conflict. Specified resource already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 409
                message: Conflict
                description: Specified resource already exists
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tier_manage
        - apim:policies_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/policies/import?overwrite=True\""
      x-swagger-router-controller: ImportExport
  /throttling/deny-policies:
    get:
      tags:
      - Deny Policies (Collection)
      summary: Get all Deny Policies
      description: |
        Retrieves all existing deny policies.
      operationId: throttlingDeny_policiesGET
      parameters:
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      responses:
        "200":
          description: |
            OK.
            Deny Policies returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingConditionList'
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bl_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/deny-policies\""
      x-swagger-router-controller: DenyPoliciesCollection
    post:
      tags:
      - Deny Policies (Collection)
      summary: Add a deny policy
      description: |
        Adds a new deny policy
      operationId: throttlingDeny_policiesPOST
      parameters:
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Blocking condition object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockingCondition'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
            Location header contains URL of newly created entity.
          headers:
            Location:
              description: |
                Location of the newly created resource.
              style: simple
              explode: false
              schema:
                type: string
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "415":
          description: Unsupported Media Type. The entity of the request was not in
            a supported format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 415
                message: Unsupported media type
                description: The entity of the request was not in a supported format
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bl_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/deny-policies\""
      x-swagger-router-controller: DenyPoliciesCollection
  /throttling/deny-policy/{conditionId}:
    get:
      tags:
      - Deny Policy (Individual)
      summary: Get a Deny Policy
      description: |
        Retrieves a Deny policy providing the condition Id
      operationId: throttlingDeny_policyConditionIdGET
      parameters:
      - name: conditionId
        in: path
        description: |
          Blocking condition identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Condition returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bl_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/deny-policy/b513eb68-69e8-4c32-92cf-852c101363c\""
      x-swagger-router-controller: DenyPolicyIndividual
    delete:
      tags:
      - Deny Policy (Individual)
      summary: Delete a Deny Policy
      description: |
        Deletes an existing deny policy
      operationId: throttlingDeny_policyConditionIdDELETE
      parameters:
      - name: conditionId
        in: path
        description: |
          Blocking condition identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bl_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/throttling/deny-policy/b513eb68-69e8-4c32-92cf-852c101363c\""
      x-swagger-router-controller: DenyPolicyIndividual
    patch:
      tags:
      - Deny Policy (Individual)
      summary: Update a Deny Policy
      description: |
        Update a deny policy by Id
      operationId: throttlingDeny_policyConditionIdPATCH
      parameters:
      - name: conditionId
        in: path
        description: |
          Blocking condition identifier
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: Content-Type
        in: header
        description: |
          Media type of the entity in the body. Default is application/json.
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      requestBody:
        description: |
          Blocking condition with updated status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockingConditionStatus'
        required: true
      responses:
        "200":
          description: |
            OK.
            Resource successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockingCondition'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bl_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PATCH -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/throttling/deny-policy/b513eb68-69e8-4c32-92cf-852c101363c\""
      x-swagger-router-controller: DenyPolicyIndividual
  /applications:
    get:
      tags:
      - Application (Collection)
      summary: |
        Retrieve/Search Applications
      description: |
        This operation can be used to retrieve list of applications owned by the given user, If no user
        is provided, the applications owned by the user associated with the provided access token will be returned.
      operationId: applicationsGET
      parameters:
      - name: user
        in: query
        description: |
          username of the application creator
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: |
          Maximum size of resource array to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 25
      - name: offset
        in: query
        description: |
          Starting point within the complete list of items qualified.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      - name: name
        in: query
        description: |
          Application Name
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: tenantDomain
        in: query
        description: |
          Tenant domain of the applications to get. This has to be specified only if it is required to get applications of
          a tenant other than the requester's tenant. So, if not specified, the default will be set as the
          requester's tenant domain. This cross tenant Application access is allowed only for super tenant admin
          users **only at a migration process**.
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: sortBy
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - owner
          default: name
      - name: sortOrder
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - asc
          - desc
          default: asc
      responses:
        "200":
          description: |
            OK.
            Application list returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationList'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:app_owner_change
        - apim:app_import_export
        - apim:admin_application_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/applications\""
      x-swagger-router-controller: ApplicationCollection
  /applications/{applicationId}:
    get:
      tags:
      - Applications
      summary: |
        Get the details of an Application
      description: |
        This operation can be used to get the details of an application by specifying its id.
      operationId: applicationsApplicationIdGET
      parameters:
      - name: applicationId
        in: path
        description: |
          Application UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Application details returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:app_import_export
        - apim:admin_application_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -X GET -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/applications/0a043c2b-ee75-4ef3-9e1c-fc2610ccfa8b\""
      x-swagger-router-controller: Applications
    delete:
      tags:
      - Applications
      summary: |
        Delete an Application
      description: |
        This operation can be used to delete an application by specifying its id.
      operationId: applicationsApplicationIdDELETE
      parameters:
      - name: applicationId
        in: path
        description: |
          Application UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Resource successfully deleted.
          content: {}
        "202":
          description: |
            Accepted.
            The request has been accepted.
          headers:
            Location:
              description: |
                Location of the existing Application.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowResponse'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:app_import_export
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/applications/0a043c2b-ee75-4ef3-9e1c-fc2610ccfa8b\""
      x-swagger-router-controller: Applications
  /applications/{applicationId}/change-owner:
    post:
      tags:
      - Application
      summary: Change Application Owner
      description: |
        This operation is used to change the owner of an Application.
        In order to change the owner of an application, we need to pass the new application owner as a query parameter
      operationId: applicationsApplicationIdChange_ownerPOST
      parameters:
      - name: owner
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: applicationId
        in: path
        description: |
          Application UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Application owner changed successfully.
          content: {}
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:app_owner_change
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/applications/0a043c2b-ee75-4ef3-9e1c-fc2610ccfa8b/change-owner?owner=admin\""
      x-swagger-router-controller: Application
  /environments:
    get:
      tags:
      - Environments
      summary: Get all registered Environments
      description: |
        Get all Registered Environments
      operationId: environmentsGET
      responses:
        "200":
          description: |
            OK.
            Environments returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentList'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:environment_read
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/environments\""
      x-swagger-router-controller: Environments
    post:
      tags:
      - Environments
      summary: Add an Environment
      description: |
        Add a new gateway environment
      operationId: environmentsPOST
      requestBody:
        description: |
          Environment object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created environment as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:environment_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/environments\""
      x-swagger-router-controller: Environments
  /environments/{environmentId}:
    put:
      tags:
      - Environments
      summary: Update an Environment
      description: |
        Update a gateway Environment by environment Id
      operationId: environmentsEnvironmentIdPUT
      parameters:
      - name: environmentId
        in: path
        description: |
          Environment UUID (or Environment name defined in config)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: |
          Environment object with updated information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Environment'
        required: true
      responses:
        "200":
          description: |
            OK.
            Environment updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Environment'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:environment_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/environments/d7cf8523-9180-4255-84fa-6cb171c1f779\""
      x-swagger-router-controller: Environments
    delete:
      tags:
      - Environments
      summary: Delete an Environment
      description: |
        Delete a Environment by Environment Id
      operationId: environmentsEnvironmentIdDELETE
      parameters:
      - name: environmentId
        in: path
        description: |
          Environment UUID (or Environment name defined in config)
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Environment successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:environment_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/environments/d7cf8523-9180-4255-84fa-6cb171c1f779\""
      x-swagger-router-controller: Environments
  /bot-detection-data:
    get:
      tags:
      - Bot Detection Data
      summary: |
        Get all Bot Detected Data
      description: |
        Get all bot detected data
      operationId: getBotDetectionData
      responses:
        "200":
          description: |
            OK.
            Bot detected data returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionDataList'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:bot_data
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/bot-detection-data\""
      x-swagger-router-controller: BotDetectionData
  /monetization/publish-usage:
    post:
      tags:
      - Monetization (Collection)
      summary: Publish Usage Records
      description: |
        Publish usage records of monetized APIs
      operationId: monetizationPublish_usagePOST
      responses:
        "200":
          description: Usage records successfully published.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
        "202":
          description: Request is sucessfully accepted for processing.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishStatus'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:monetization_usage_publish
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/monetization/publish-usage\""
      x-swagger-router-controller: MonetizationCollection
  /monetization/publish-usage/status:
    get:
      tags:
      - Monetization (Collection)
      summary: Get the Status of Monetization Usage Publisher
      description: |
        Get the status of monetization usage publisher
      operationId: monetizationPublish_usageStatusGET
      responses:
        "200":
          description: |
            OK.
            Status returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonetizationUsagePublishInfo'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:monetization_usage_publish
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/monetization/publish-usage/status\""
      x-swagger-router-controller: MonetizationCollection
  /workflows:
    get:
      tags:
      - Workflow (Collection)
      summary: |
        Retrieve All Pending Workflow Processes
      description: |
        This operation can be used to retrieve list of workflow pending processes.
      operationId: workflowsGET
      parameters:
      - name: limit
        in: query
        description: |
          Maximum size of resource array to return.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 25
      - name: offset
        in: query
        description: |
          Starting point within the complete list of items qualified.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: 0
      - name: Accept
        in: header
        description: |
          Media types acceptable for the response. Default is application/json.
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: application/json
      - name: workflowType
        in: query
        description: |
          We need to show the values of each workflow process separately .for that we use workflow type.
          Workflow type can be AM_APPLICATION_CREATION, AM_SUBSCRIPTION_CREATION,   AM_USER_SIGNUP, AM_APPLICATION_REGISTRATION_PRODUCTION, AM_APPLICATION_REGISTRATION_SANDBOX.
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - AM_APPLICATION_CREATION
          - AM_SUBSCRIPTION_CREATION
          - AM_USER_SIGNUP
          - AM_APPLICATION_REGISTRATION_PRODUCTION
          - AM_APPLICATION_REGISTRATION_SANDBOX
          - AM_SUBSCRIPTION_DELETION
          - AM_APPLICATION_DELETION
          - AM_API_STATE
          - AM_API_PRODUCT_STATE
      responses:
        "200":
          description: |
            OK.
            Workflow pendding process list returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowList'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:api_workflow_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/workflows\""
      x-swagger-router-controller: WorkflowCollection
  /workflows/{externalWorkflowRef}:
    get:
      tags:
      - Workflows (Individual)
      summary: |
        Get Pending Workflow Details by External Workflow Reference
      description: |
        Using this operation, you can retrieve complete details of a pending workflow request that either belongs to application creation, application subscription, application registration, api state change, user self sign up.. You need to provide the External_Workflow_Reference of the workflow Request to retrive it.
      operationId: workflowsExternalWorkflowRefGET
      parameters:
      - name: externalWorkflowRef
        in: path
        description: |
          from the externel workflow reference we decide what is the the pending request that the are requesting.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Requested Workflow Pending is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowInfo'
        "304":
          description: |
            Not Modified.
            Empty body because the client has already the latest version of the requested resource.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:api_workflow_view
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/workflows/c43a325c-260b-4302-81cb-768eafaa3aed\""
      x-swagger-router-controller: WorkflowsIndividual
  /workflows/update-workflow-status:
    post:
      tags:
      - Workflows (Individual)
      summary: Update Workflow Status
      description: |
        This operation can be used to approve or reject a workflow task.
      operationId: workflowsUpdate_workflow_statusPOST
      parameters:
      - name: workflowReferenceId
        in: query
        description: |
          Workflow reference id
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: |
          Workflow event that need to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workflow'
        required: true
      responses:
        "200":
          description: |
            OK.
            Workflow request information is returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:api_workflow_approve
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/workflows/update-workflow-status?workflowReferenceId=56e3a170-a7a7-45f8-b051-7e43a58a67e1\""
      x-swagger-router-controller: WorkflowsIndividual
  /tenant-info/{username}:
    get:
      tags:
      - Tenants
      summary: |
        Get Tenant Id of User
      description: |
        This operation is to get tenant id of the provided user
      operationId: getTenantInfoByUsername
      parameters:
      - name: username
        in: path
        description: |
          The state represents the current state of the tenant. Supported states are [ active, inactive]
        required: true
        style: simple
        explode: false
        schema:
          type: string
          default: john
      responses:
        "200":
          description: |
            OK.
            Tenant id of the user retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tenantInfo
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/tenant-info/john\""
      x-swagger-router-controller: Tenants
  /custom-urls/{tenantDomain}:
    get:
      tags:
      - Tenants
      summary: |
        Get Custom URL Info of a Tenant Domain
      description: |
        This operation is to get custom-url information of the provided tenant-domain
      operationId: getCustomUrlInfoByTenantDomain
      parameters:
      - name: tenantDomain
        in: path
        description: |
          The tenant domain name.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Custom url info of the tenant is retrieved.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUrlInfo'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tenantInfo
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/custom-urls/wso2.com\""
      x-swagger-router-controller: Tenants
  /api-categories:
    get:
      tags:
      - API Category (Collection)
      summary: Get all API Categories
      description: |
        Get all API categories
      operationId: api_categoriesGET
      responses:
        "200":
          description: |
            OK.
            Categories returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategoryList'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/api-categories\""
      x-swagger-router-controller: APICategoryCollection
    post:
      tags:
      - API Category (Individual)
      summary: Add API Category
      description: |
        Add a new API category
      operationId: api_categoriesPOST
      requestBody:
        description: |
          API Category object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APICategory'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategory'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/api-categories\""
      x-swagger-router-controller: APICategoryIndividual
  /api-categories/{apiCategoryId}:
    put:
      tags:
      - API Category (Individual)
      summary: Update an API Category
      description: |
        Update an API Category by category Id
      operationId: api_categoriesApiCategoryIdPUT
      parameters:
      - name: apiCategoryId
        in: path
        description: |
          API Category UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: |
          API Category object with updated information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APICategory'
        required: true
      responses:
        "200":
          description: |
            OK.
            Label updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APICategory'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779\""
      x-swagger-router-controller: APICategoryIndividual
    delete:
      tags:
      - API Category (Individual)
      summary: Delete an API Category
      description: |
        Delete an API Category by API Category Id
      operationId: api_categoriesApiCategoryIdDELETE
      parameters:
      - name: apiCategoryId
        in: path
        description: |
          API Category UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            API Category successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/api-categories/d7cf8523-9180-4255-84fa-6cb171c1f779\""
      x-swagger-router-controller: APICategoryIndividual
  /settings:
    get:
      tags:
      - Settings
      summary: Retreive Admin Settings
      description: |
        Retreive admin settings
      operationId: settingsGET
      responses:
        "200":
          description: |
            OK.
            Settings returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settings'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_settings
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/settings\""
      x-swagger-router-controller: Settings
  /alert-types:
    get:
      tags:
      - Alerts
      summary: |
        Get all Admin Alert Types
      description: |
        This operation is used to get the list of supportd alert types for the apim admin dashboard
      operationId: getAdminAlertTypes
      responses:
        "200":
          description: |
            OK.
            The list of admin alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertTypesList'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/alert-types\""
      x-swagger-router-controller: Alerts
  /alert-subscriptions:
    get:
      tags:
      - Alert Subscriptions
      summary: |
        Get Subscribed Alert Types
      description: |
        This operation is used to get the list of subscribed alert types by the user.
      operationId: getSubscribedAlertTypes
      responses:
        "200":
          description: |
            OK.
            The list of subscribed alert types are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsSubscription'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions\""
      x-swagger-router-controller: AlertSubscriptions
    put:
      tags:
      - Alert Subscriptions
      summary: |
        Subscribe to an Admin Alert
      description: |
        This operation is used to subscribe to admin alerts
      operationId: subscribeToAlerts
      requestBody:
        description: The alerts list and the email list to subscribe.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertsSubscription'
        required: true
      responses:
        "200":
          description: |
            OK.
            Successful response with the newly subscribed alerts.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertsSubscription'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions\""
      x-swagger-router-controller: AlertSubscriptions
    delete:
      tags:
      - Alert Subscriptions
      summary: |
        Unsubscribe User from all Admin Alerts
      description: |
        This operation is used to unsubscribe the respective user from all the admin alert types.
      operationId: unsubscribeAllAlerts
      responses:
        "200":
          description: |
            OK.
            The user is unsubscribed from the alerts successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content: {}
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions\""
      x-swagger-router-controller: AlertSubscriptions
  /alert-subscriptions/bot-detection:
    get:
      tags:
      - Bot Detection Alert Subscriptions
      summary: |
        Get Subscriptions for Bot Detection
      description: |
        Get the list of subscriptions which are subscribed to receive email alerts for bot detection
      operationId: getBotDetectionAlertSubscriptions
      responses:
        "200":
          description: |
            OK.
            The list of bot detection alert subscriptions are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionAlertSubscriptionList'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions/bot-detection\""
      x-swagger-router-controller: BotDetectionAlertSubscriptions
    post:
      tags:
      - Bot Detection Alert Subscriptions
      summary: Subscribe for Bot Detection Alerts
      description: |
        Register a subscription for bot detection alerts
      operationId: subscribeForBotDetectionAlerts
      requestBody:
        description: |
          The email to register to receive bot detection alerts
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BotDetectionAlertSubscription'
        required: true
      responses:
        "200":
          description: |
            OK.
            Bot detection alert subscription is registered successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotDetectionAlertSubscription'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions/bot-detection\""
      x-swagger-router-controller: BotDetectionAlertSubscriptions
  /alert-subscriptions/bot-detection/{uuid}:
    delete:
      tags:
      - Bot Detection Alert Subscriptions
      summary: Unsubscribe from bot detection alerts.
      description: |
        Delete a Bot Detection Alert Subscription
      operationId: unsubscribeFromBotDetectionAlerts
      parameters:
      - name: uuid
        in: path
        description: uuid of the subscription
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Bot detection alert subscription is deleted successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_alert_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/alert-subscriptions/bot-detection/7c9ee02d-37f5-4694-b99c-6d5641b28645\""
      x-swagger-router-controller: BotDetectionAlertSubscriptions
  /system-scopes/{scopeName}:
    get:
      tags:
      - System Scopes
      summary: Retrieve Scopes for a Particular User
      description: |
        This operation will return the scope list of particular user
        In order to get it, we need to pass the userId as a query parameter
      operationId: systemScopesScopeNameGet
      parameters:
      - name: username
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scopeName
        in: path
        description: |
          Base64 URL encoded value of the scope name to be validated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Particular scope exists for the given user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeSettings'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:scope_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/system-scopes/YXBpbTpzdWJzY3JpYmU?username=john\""
      x-swagger-router-controller: SystemScopes
  /system-scopes:
    get:
      tags:
      - System Scopes
      summary: |
        Get Role Scope Mappings
      description: |
        This operation is used to get the list of role scope mapping from tenant-conf for the apim admin dashboard
      operationId: systemScopesGet
      responses:
        "200":
          description: |
            OK.
            The list of role scope mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeList'
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:scope_manage
        - apim:admin
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/system-scopes\""
      x-swagger-router-controller: SystemScopes
    put:
      tags:
      - System Scopes
      summary: |
        Update Roles For Scope
      description: |
        This operation is used to update the roles for all scopes
      operationId: updateRolesForScope
      requestBody:
        description: |
          Scope list object with updated scope to role mappings
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScopeList'
        required: true
      responses:
        "200":
          description: |
            OK.
            Successful response with the newly added roles.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScopeList'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:scope_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/system-scopes\""
      x-swagger-router-controller: SystemScopes
  /system-scopes/role-aliases:
    get:
      tags:
      - System Scopes
      summary: Retrieve Role Alias Mappings
      description: |
        This operation can be used to retreive role alias mapping
      operationId: system_scopesRole_aliasesGET
      responses:
        "200":
          description: |
            OK.
            The list of role mappings are returned.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAliasList'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:scope_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/system-scopes/role-aliases\""
      x-swagger-router-controller: SystemScopes
    put:
      tags:
      - System Scopes
      summary: Add a New Role Alias
      description: |
        This operation can be used to add a new role alias mapping for system scope roles
      operationId: system_scopesRole_aliasesPUT
      requestBody:
        description: role-alias mapping
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAliasList'
        required: true
      responses:
        "200":
          description: |
            OK.
            Role mapping alias returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleAliasList'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:scope_manage
        - apim:admin
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/system-scopes/role-aliases\""
      x-swagger-router-controller: SystemScopes
  /roles/{roleId}:
    head:
      tags:
      - Roles
      summary: Check Whether Given Role Name already Exist
      description: |
        Using this operation, user can check a given role name exists or not.
      operationId: validateSystemRole
      parameters:
      - name: roleId
        in: path
        description: |
          The Base 64 URL encoded role name with domain. If the given role is in PRIMARY user-store, role ID should be
          derived as Base64URLEncode(role-name). If the given role is in secondary user-store, role ID should be
          derived as Base64URLEncode({user-store-name}/{role-name}).
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK. Requested role name exists.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:role_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -I -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/roles/SW50ZXJuYWwvcHVibGlzaGVyCQ\""
      x-swagger-router-controller: Roles
  /tenant-theme:
    get:
      tags:
      - Tenant Theme
      summary: Export a DevPortal Tenant Theme
      description: |
        This operation can be used to export a DevPortal tenant theme as a zip file.
      operationId: exportTenantTheme
      responses:
        "200":
          description: |
            OK.
            Tenant Theme Exported Successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/zip:
              schema:
                type: string
                format: binary
                x-content-type: application/zip
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tenant_theme_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/tenant-theme\" > theme.zip"
      x-swagger-router-controller: TenantTheme
    put:
      tags:
      - Tenant Theme
      summary: Import a DevPortal Tenant Theme
      description: |
        This operation can be used to import a DevPortal tenant theme.
      operationId: importTenantTheme
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/tenanttheme_body'
        required: true
      responses:
        "200":
          description: |
            Ok.
            Tenant Theme Imported Successfully.
          content: {}
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "413":
          description: Payload Too Large. Request entity is larger than limits defined
            by server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 413
                message: Payload Too Large
                description: Request entity is larger than limits defined by server
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:tenant_theme_manage
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -F file=@theme.zip \"https://127.0.0.1:9443/api/am/admin/v3/tenant-theme\""
      x-swagger-router-controller: TenantTheme
  /tenant-config:
    get:
      tags:
      - Tenant Config
      summary: Export a tenant-Config.
      description: |
        This operation can be used to export a tenant-config.json used in deployment.
      operationId: exportTenantConfig
      responses:
        "200":
          description: |
            OK.
            Tenant config Exported Successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/tenant-config\" > tenant-config.json"
      x-swagger-router-controller: TenantConfig
    put:
      tags:
      - Tenant Config
      summary: Update a tenant-config.
      description: |
        This operation can be used to update tenant-config.
      operationId: updateTenantConfig
      requestBody:
        description: tenant-config
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: |
            OK.
            Role mapping alias returned
          content:
            application/json:
              schema:
                type: object
                x-content-type: application/json
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "413":
          description: Payload Too Large. Request entity is larger than limits defined
            by server.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 413
                message: Payload Too Large
                description: Request entity is larger than limits defined by server
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/tenant-config\""
      x-swagger-router-controller: TenantConfig
  /tenant-config-schema:
    get:
      tags:
      - Tenant Config Schema
      summary: Export a tenant-Config-Schema.
      description: |
        This operation can be used to export a tenant-config-schema.json used in deployment.
      operationId: exportTenantConfigSchema
      responses:
        "200":
          description: |
            OK.
            Tenant config schema exported successfully.
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "403":
          description: Forbidden. The request must be conditional but no condition
            has been specified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: Forbidden
                description: The request must be conditional but no condition has
                  been specified
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 500
                message: Internal Server Error
                description: The server encountered an internal error. Please contact
                  administrator.
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/tenant-config-schema\" > tenant-config-schema.json"
      x-swagger-router-controller: TenantConfigSchema
  /key-managers:
    get:
      tags:
      - Key Manager (Collection)
      summary: Get all Key managers
      description: |
        Get all Key managers
      operationId: key_managersGET
      responses:
        "200":
          description: |
            OK.
            KeyManagers returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManagerList'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/key-managers\""
      x-swagger-router-controller: KeyManagerCollection
    post:
      tags:
      - Key Manager (Collection)
      summary: Add a new API Key Manager
      description: |
        Add a new API Key Manager
      operationId: key_managersPOST
      requestBody:
        description: |
          Key Manager object that should to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyManager'
        required: true
      responses:
        "201":
          description: |
            Created.
            Successful response with the newly created object as entity in the body.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/key-managers\""
      x-swagger-router-controller: KeyManagerCollection
  /key-managers/{keyManagerId}:
    get:
      tags:
      - Key Manager (Individual)
      summary: Get a Key Manager Configuration
      description: |
        Retrieve a single Key Manager Configuration. We should provide the Id of the KeyManager as a path parameter.
      operationId: key_managersKeyManagerIdGET
      parameters:
      - name: keyManagerId
        in: path
        description: |
          Key Manager UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            KeyManager Configuration returned
          headers:
            Content-Type:
              description: |
                The content type of the body.
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
        "406":
          description: Not Acceptable. The requested media type is not supported.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 406
                message: Not Acceptable
                description: The requested media type is not supported
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/key-managers/8d263942-a6df-4cc2-a804-7a2525501450\""
      x-swagger-router-controller: KeyManagerIndividual
    put:
      tags:
      - Key Manager (Individual)
      summary: Update a Key Manager
      description: |
        Update a Key Manager by keyManager id
      operationId: key_managersKeyManagerIdPUT
      parameters:
      - name: keyManagerId
        in: path
        description: |
          Key Manager UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: |
          Key Manager object with updated information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeyManager'
        required: true
      responses:
        "200":
          description: |
            OK.
            Label updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManager'
        "400":
          description: Bad Request. Invalid request or validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 400
                message: Bad Request
                description: Invalid request or validation error
                moreInfo: ""
                error: []
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X PUT -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -H \"Content-Type: application/json\" -d @data.json \"https://127.0.0.1:9443/api/am/admin/v3/key-managers/8d263942-a6df-4cc2-a804-7a2525501450\""
      x-swagger-router-controller: KeyManagerIndividual
    delete:
      tags:
      - Key Manager (Individual)
      summary: Delete a Key Manager
      description: |
        Delete a Key Manager by keyManager id
      operationId: key_managersKeyManagerIdDELETE
      parameters:
      - name: keyManagerId
        in: path
        description: |
          Key Manager UUID
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: |
            OK.
            Key Manager successfully deleted.
          content: {}
        "404":
          description: Not Found. The specified resource does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 404
                message: Not Found
                description: The specified resource does not exist
                moreInfo: ""
                error: []
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X DELETE -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ \"https://127.0.0.1:9443/api/am/admin/v3/key-managers/8d263942-a6df-4cc2-a804-7a2525501450\""
      x-swagger-router-controller: KeyManagerIndividual
  /key-managers/discover:
    post:
      tags:
      - Key Manager (Collection)
      summary: Retrieve Well-known information from Key Manager Well-known Endpoint
      description: |
        Retrieve well-known information from key manager's well-known endpoint
      operationId: key_managersDiscoverPOST
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/keymanagers_discover_body'
      responses:
        "200":
          description: |
            OK.
            KeyManagers returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeyManagerWellKnownResponse'
      security:
      - OAuth2Security:
        - apim:admin
        - apim:admin_operations
      x-code-samples:
      - lang: Curl
        source: "curl -k -X POST -H \"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\"\
          \ -F \"type=WSO2-IS\" \"https://127.0.0.1:9443/api/am/admin/v3/key-managers/discover\""
      x-swagger-router-controller: KeyManagerCollection
components:
  schemas:
    Error:
      title: Error object returned with 4XX HTTP status
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: integer
          description: Error code
          format: int64
        message:
          type: string
          description: Error message.
        description:
          type: string
          description: |
            A detail description about the error message.
        moreInfo:
          type: string
          description: |
            Preferably an url with more details about the error.
        error:
          type: array
          description: |
            If there are more than one error list them out.
            For example, list out validation errors by each field.
          items:
            $ref: '#/components/schemas/ErrorListItem'
    ErrorListItem:
      title: Description of individual errors that may have occurred during a request.
      required:
      - code
      - message
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: |
            Description about individual errors occurred
    ThrottlePolicyList:
      title: Throttle Policy List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ThrottlePolicy'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ThrottlePolicyDetailsList:
      title: Policy List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ThrottlePolicyDetails'
      example:
        count: 1
        list:
        - policyId: 3
          policyName: 30PerMin
          displayName: 30PerMin
          isDeployed: false
          description: Allows 30 request per minute
          type: type
          uuid: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
        - policyId: 3
          policyName: 30PerMin
          displayName: 30PerMin
          isDeployed: false
          description: Allows 30 request per minute
          type: type
          uuid: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
    ThrottlePolicyDetails:
      title: Generic Policy
      required:
      - policyName
      type: object
      properties:
        policyId:
          type: integer
          description: Id of policy
          readOnly: true
          example: 3
        uuid:
          type: string
          description: UUId of policy
          readOnly: true
          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
        policyName:
          maxLength: 60
          minLength: 1
          type: string
          description: Name of policy
          example: 30PerMin
        displayName:
          maxLength: 512
          type: string
          description: Display name of the policy
          example: 30PerMin
        description:
          maxLength: 1024
          type: string
          description: Description of the policy
          example: Allows 30 request per minute
        isDeployed:
          type: boolean
          description: Indicates whether the policy is deployed successfully or not.
          default: false
        type:
          type: string
          description: Indicates the type of throttle policy
      example:
        policyId: 3
        policyName: 30PerMin
        displayName: 30PerMin
        isDeployed: false
        description: Allows 30 request per minute
        type: type
        uuid: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
    ThrottlePolicy:
      title: Generic Throttling Policy
      required:
      - policyName
      type: object
      properties:
        policyId:
          type: string
          description: Id of policy
          readOnly: true
          example: 0c6439fd-9b16-3c2e-be6e-1086e0b9aa93
        policyName:
          maxLength: 60
          minLength: 1
          type: string
          description: Name of policy
          example: 30PerMin
        displayName:
          maxLength: 512
          type: string
          description: Display name of the policy
          example: 30PerMin
        description:
          maxLength: 1024
          type: string
          description: Description of the policy
          example: Allows 30 request per minute
        isDeployed:
          type: boolean
          description: Indicates whether the policy is deployed successfully or not.
          default: false
        type:
          type: string
          description: Indicates the type of throttle policy
      discriminator:
        propertyName: type
    ExportThrottlePolicy:
      title: Export Throttling Policy
      type: object
      properties:
        type:
          type: string
        subtype:
          type: string
        version:
          type: string
        data:
          type: object
      example:
        data: {}
        subtype: subtype
        type: type
        version: version
    AdvancedThrottlePolicyInfo:
      title: Advanced Throttling Policy
      allOf:
      - $ref: '#/components/schemas/ThrottlePolicy'
      - type: object
        properties:
          defaultLimit:
            $ref: '#/components/schemas/ThrottleLimit'
    AdvancedThrottlePolicy:
      title: Advanced Throttling Policy
      allOf:
      - $ref: '#/components/schemas/ThrottlePolicy'
      - required:
        - defaultLimit
        type: object
        properties:
          defaultLimit:
            $ref: '#/components/schemas/ThrottleLimit'
          conditionalGroups:
            type: array
            description: |
              Group of conditions which allow adding different parameter conditions to the throttling limit.
            items:
              $ref: '#/components/schemas/ConditionalGroup'
    AdvancedThrottlePolicyList:
      title: Advanced Throttling Policy List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Advanced Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/AdvancedThrottlePolicyInfo'
      example:
        count: 1
        list:
        - ""
        - ""
    ApplicationThrottlePolicy:
      title: Application Throttling Policy
      allOf:
      - $ref: '#/components/schemas/ThrottlePolicy'
      - required:
        - defaultLimit
        type: object
        properties:
          defaultLimit:
            $ref: '#/components/schemas/ThrottleLimit'
    ApplicationThrottlePolicyList:
      title: Application Level Throttling Policy List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Application Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationThrottlePolicy'
      example:
        count: 1
        list:
        - ""
        - ""
    SubscriptionThrottlePolicy:
      title: Subscription Throttling Policy
      allOf:
      - $ref: '#/components/schemas/ThrottlePolicy'
      - $ref: '#/components/schemas/GraphQLQuery'
      - required:
        - defaultLimit
        type: object
        properties:
          defaultLimit:
            $ref: '#/components/schemas/ThrottleLimit'
          monetization:
            $ref: '#/components/schemas/MonetizationInfo'
          rateLimitCount:
            type: integer
            description: Burst control request count
            example: 10
          rateLimitTimeUnit:
            type: string
            description: Burst control time unit
            example: min
          subscriberCount:
            type: integer
            description: Number of subscriptions allowed
            example: 10
          customAttributes:
            type: array
            description: |
              Custom attributes added to the Subscription Throttling Policy
            example: []
            items:
              $ref: '#/components/schemas/CustomAttribute'
          stopOnQuotaReach:
            type: boolean
            description: |
              This indicates the action to be taken when a user goes beyond the allocated quota. If checked, the user's requests will be dropped. If unchecked, the requests will be allowed to pass through.
            default: false
          billingPlan:
            type: string
            description: |
              define whether this is Paid or a Free plan. Allowed values are FREE or COMMERCIAL.
            example: FREE
          permissions:
            $ref: '#/components/schemas/SubscriptionThrottlePolicyPermission'
    SubscriptionThrottlePolicyPermission:
      title: SubscriptionThrottlePolicyPermission
      required:
      - permissionType
      - roles
      type: object
      properties:
        permissionType:
          type: string
          example: deny
          enum:
          - ALLOW
          - DENY
        roles:
          type: array
          example:
          - Internal/everyone
          items:
            type: string
    GraphQLQuery:
      title: GraphQL Query
      type: object
      properties:
        graphQLMaxComplexity:
          type: integer
          description: Maximum Complexity of the GraphQL query
          example: 400
        graphQLMaxDepth:
          type: integer
          description: Maximum Depth of the GraphQL query
          example: 10
    SubscriptionThrottlePolicyList:
      title: Subscription Level Throttling Policy List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Subscription Throttling Policies returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionThrottlePolicy'
      example:
        count: 1
        list:
        - ""
        - ""
    CustomRule:
      title: Custom Rule
      allOf:
      - $ref: '#/components/schemas/ThrottlePolicy'
      - required:
        - keyTemplate
        - siddhiQuery
        type: object
        properties:
          siddhiQuery:
            type: string
            description: Siddhi query which represents the custom throttling policy
            example: |
              FROM RequestStream\nSELECT userId, ( userId == 'admin@carbon.super' ) AS isEligible , str:concat('admin@carbon.super','') as throttleKey\nINSERT INTO EligibilityStream; \n\nFROM EligibilityStream[isEligible==true]#throttler:timeBatch(1 min) \nSELECT throttleKey, (count(userId) >= 10) as isThrottled, expiryTimeStamp group by throttleKey \nINSERT ALL EVENTS into ResultStream;
          keyTemplate:
            type: string
            description: The specific combination of attributes that are checked in
              the policy.
            example: $userId
    CustomRuleList:
      title: Custom Rule List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Custom Rules returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/CustomRule'
      example:
        count: 1
        list:
        - ""
        - ""
    ConditionalGroup:
      title: Conditional Groups for Throttling
      required:
      - conditions
      - limit
      type: object
      properties:
        description:
          type: string
          description: Description of the Conditional Group
        conditions:
          type: array
          description: |
            Individual throttling conditions. They can be defined as either HeaderCondition, IPCondition, JWTClaimsCondition, QueryParameterCondition
            Please see schemas of each of those throttling condition in Definitions section.
          example: |
            [
              {
                "type": "HEADERCONDITION",
                "invertCondition": false,
                "headerCondition":
                {
                  "headerName": "Host",
                  "headerValue": "10.100.7.77"
                }
              },
              {
                "type": "IPCONDITION",
                "invertCondition": false,
                "ipCondition":
                {
                  "ipConditionType": "IPSPECIFIC",
                  "specificIP": "10.100.1.22",
                  "startingIP": null,
                  "endingIP": null
                }
              },
              {
                "type": "QUERYPARAMETERCONDITION",
                "invertCondition": false,
                "queryParameterCondition":
                {
                  "parameterName": "name",
                  "parameterValue": "admin"
                }
              },
              {
                "type": "JWTCLAIMSCONDITION",
                "invertCondition": true,
                "jwtClaimsCondition":
                {
                  "claimUrl": "claimUrl0",
                  "attribute": "claimAttr0"
                }
              }
            ]
          items:
            $ref: '#/components/schemas/ThrottleCondition'
        limit:
          $ref: '#/components/schemas/ThrottleLimit'
    ThrottleCondition:
      title: Throttling Conditions
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Type of the throttling condition. Allowed values are "HEADERCONDITION", "IPCONDITION", "JWTCLAIMSCONDITION"
            and "QUERYPARAMETERCONDITION".
          enum:
          - HEADERCONDITION
          - IPCONDITION
          - JWTCLAIMSCONDITION
          - QUERYPARAMETERCONDITION
        invertCondition:
          type: boolean
          description: |
            Specifies whether inversion of the condition to be matched against the request.

            **Note:** When you add conditional groups for advanced throttling policies, this paramater should have the
            same value ('true' or 'false') for the same type of conditional group.
          default: false
        headerCondition:
          $ref: '#/components/schemas/HeaderCondition'
        ipCondition:
          $ref: '#/components/schemas/IPCondition'
        jwtClaimsCondition:
          $ref: '#/components/schemas/JWTClaimsCondition'
        queryParameterCondition:
          $ref: '#/components/schemas/QueryParameterCondition'
      description: Conditions used for Throttling
    HeaderCondition:
      title: HTTP Header based throttling condition
      required:
      - headerName
      - headerValue
      type: object
      properties:
        headerName:
          type: string
          description: Name of the header
        headerValue:
          type: string
          description: Value of the header
    IPCondition:
      title: IP based throttling condition
      type: object
      properties:
        ipConditionType:
          type: string
          description: Type of the IP condition. Allowed values are "IPRANGE" and
            "IPSPECIFIC"
          enum:
          - IPRANGE
          - IPSPECIFIC
        specificIP:
          type: string
          description: Specific IP when "IPSPECIFIC" is used as the ipConditionType
        startingIP:
          type: string
          description: Staring IP when "IPRANGE" is used as the ipConditionType
        endingIP:
          type: string
          description: Ending IP when "IPRANGE" is used as the ipConditionType
    JWTClaimsCondition:
      title: JWT claim attibute based throttling condition
      required:
      - attribute
      - claimUrl
      type: object
      properties:
        claimUrl:
          type: string
          description: JWT claim URL
        attribute:
          type: string
          description: Attribute to be matched
    QueryParameterCondition:
      title: Query parameter based throttling condition
      required:
      - parameterName
      - parameterValue
      type: object
      properties:
        parameterName:
          type: string
          description: Name of the query parameter
        parameterValue:
          type: string
          description: Value of the query parameter to be matched
    ThrottleLimitBase:
      title: Throttle Limit Base
      required:
      - timeUnit
      - unitTime
      type: object
      properties:
        timeUnit:
          type: string
          description: "Unit of the time. Allowed values are \"sec\", \"min\", \"\
            hour\", \"day\""
          example: min
        unitTime:
          type: integer
          description: Time limit that the throttling limit applies.
          example: 10
    ThrottleLimit:
      title: Throttle Limit
      required:
      - type
      type: object
      properties:
        type:
          type: string
          description: |
            Type of the throttling limit. Allowed values are "REQUESTCOUNTLIMIT" and "BANDWIDTHLIMIT".
            Please see schemas of "RequestCountLimit" and "BandwidthLimit" throttling limit types in
            Definitions section.
          example: REQUESTCOUNTLIMIT
          enum:
          - REQUESTCOUNTLIMIT
          - BANDWIDTHLIMIT
          - EVENTCOUNTLIMIT
        requestCount:
          $ref: '#/components/schemas/RequestCountLimit'
        bandwidth:
          $ref: '#/components/schemas/BandwidthLimit'
        eventCount:
          $ref: '#/components/schemas/EventCountLimit'
    MonetizationInfo:
      title: API monetization details object
      required:
      - properties
      type: object
      properties:
        monetizationPlan:
          type: string
          description: Flag to indicate the monetization plan
          example: FixedRate
          enum:
          - FIXEDRATE
          - DYNAMICRATE
        properties:
          type: object
          additionalProperties:
            type: string
          description: Map of custom properties related to each monetization plan
    BandwidthLimit:
      title: Bandwidth Limit object
      allOf:
      - $ref: '#/components/schemas/ThrottleLimitBase'
      - required:
        - dataAmount
        - dataUnit
        type: object
        properties:
          dataAmount:
            type: integer
            description: Amount of data allowed to be transfered
            format: int64
            example: 1000
          dataUnit:
            type: string
            description: "Unit of data allowed to be transfered. Allowed values are\
              \ \"KB\", \"MB\" and \"GB\""
            example: KB
    RequestCountLimit:
      title: Request Count Limit object
      allOf:
      - $ref: '#/components/schemas/ThrottleLimitBase'
      - required:
        - requestCount
        type: object
        properties:
          requestCount:
            type: integer
            description: Maximum number of requests allowed
            format: int64
            example: 30
    EventCountLimit:
      title: Event Count Limit object
      allOf:
      - $ref: '#/components/schemas/ThrottleLimitBase'
      - required:
        - eventCount
        type: object
        properties:
          eventCount:
            type: integer
            description: Maximum number of events allowed
            format: int64
            example: 3000
    BlockingCondition:
      title: Blocking Conditions
      required:
      - conditionType
      - conditionValue
      type: object
      properties:
        conditionId:
          type: string
          description: Id of the blocking condition
          example: b513eb68-69e8-4c32-92cf-852c101363cf
        conditionType:
          type: string
          description: Type of the blocking condition
          example: IP
          enum:
          - API
          - APPLICATION
          - IP
          - IPRANGE
          - USER
        conditionValue:
          type: object
          properties: {}
          description: Value of the blocking condition
          example:
            fixedIp: 192.168.1.1
            invert: false
        conditionStatus:
          type: boolean
          description: Status of the blocking condition
          example: true
      description: Blocking Conditions
      example:
        conditionStatus: true
        conditionId: b513eb68-69e8-4c32-92cf-852c101363cf
        conditionValue:
          fixedIp: 192.168.1.1
          invert: false
        conditionType: IP
    BlockingConditionList:
      title: Blocking Conditions List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Blocking Conditions returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/BlockingCondition'
      example:
        count: 1
        list:
        - conditionStatus: true
          conditionId: b513eb68-69e8-4c32-92cf-852c101363cf
          conditionValue:
            fixedIp: 192.168.1.1
            invert: false
          conditionType: IP
        - conditionStatus: true
          conditionId: b513eb68-69e8-4c32-92cf-852c101363cf
          conditionValue:
            fixedIp: 192.168.1.1
            invert: false
          conditionType: IP
    BlockingConditionStatus:
      title: Blocking Conditions Status
      required:
      - conditionStatus
      type: object
      properties:
        conditionId:
          type: string
          description: Id of the blocking condition
          example: b513eb68-69e8-4c32-92cf-852c101363cf
        conditionStatus:
          type: boolean
          description: Status of the blocking condition
          example: true
      description: Blocking Conditions Status
    CustomAttribute:
      title: Name-Value pair
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          description: Name of the custom attribute
          example: customAttr1
        value:
          type: string
          description: Value of the custom attribute
          example: value1
    ApplicationList:
      title: Application List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of applications returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationInfo'
        pagination:
          $ref: '#/components/schemas/Pagination'
      example:
        pagination:
          next: next
          total: 10
          offset: 0
          previous: previous
          limit: 1
        count: 1
        list:
        - owner: admin
          groupId: ""
          name: CalculatorApp
          applicationId: 01234567-0123-0123-0123-012345678901
          status: APPROVED
        - owner: admin
          groupId: ""
          name: CalculatorApp
          applicationId: 01234567-0123-0123-0123-012345678901
          status: APPROVED
    ApplicationInfo:
      title: Application info object with basic application details
      type: object
      properties:
        applicationId:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: CalculatorApp
        owner:
          type: string
          example: admin
        status:
          type: string
          example: APPROVED
        groupId:
          type: string
          example: ""
      example:
        owner: admin
        groupId: ""
        name: CalculatorApp
        applicationId: 01234567-0123-0123-0123-012345678901
        status: APPROVED
    Application:
      title: Application object with all the application details
      type: object
      properties:
        applicationId:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: CalculatorApp
        throttlingPolicy:
          type: string
          example: Unlimited
        description:
          type: string
          example: Sample calculator application
        tokenType:
          type: string
          description: |
            Type of the access token generated for this application.
            **OAUTH:** A UUID based access token which is issued by default.
            **JWT:** A self-contained, signed JWT based access token. **Note:** This can be only used in Microgateway environments.
          example: JWT
          enum:
          - OAUTH
          - JWT
          default: JWT
        status:
          type: string
          example: APPROVED
          default: ""
        groups:
          type: array
          example: ""
          items:
            type: string
        subscriptionCount:
          type: integer
        attributes:
          type: object
          additionalProperties:
            type: string
          example: "External Reference ID, Billing Tier"
        subscriptionScopes:
          type: array
          items:
            $ref: '#/components/schemas/ScopeInfo'
        owner:
          type: string
          description: |
            Application created user
          example: admin
      example:
        owner: admin
        subscriptionScopes:
        - roles:
          - manager
          - developer
          name: admin scope
          description: description
          key: admin_scope
        - roles:
          - manager
          - developer
          name: admin scope
          description: description
          key: admin_scope
        name: CalculatorApp
        subscriptionCount: 0
        description: Sample calculator application
        groups: ""
        attributes: "External Reference ID, Billing Tier"
        throttlingPolicy: Unlimited
        applicationId: 01234567-0123-0123-0123-012345678901
        tokenType: JWT
        status: APPROVED
    ScopeInfo:
      title: API Scope info object with scope details
      type: object
      properties:
        key:
          type: string
          example: admin_scope
        name:
          type: string
          example: admin scope
        roles:
          type: array
          description: Allowed roles for the scope
          example:
          - manager
          - developer
          items:
            type: string
        description:
          type: string
          description: Description of the scope
      example:
        roles:
        - manager
        - developer
        name: admin scope
        description: description
        key: admin_scope
    APIInfoList:
      title: API Info List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of API Info objects returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/APIInfo'
    APIInfo:
      title: API info object with basic API details
      type: object
      properties:
        name:
          type: string
          description: The name of the API.
          example: PizzaShackAPI
        version:
          type: string
          description: The version of the API
          example: 1.0.0
        provider:
          type: string
          description: The provider of the API
          example: admin
    Environment:
      title: Environment
      required:
      - name
      - vhosts
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: ece92bdc-e1e6-325c-b6f4-656208a041e9
        name:
          maxLength: 255
          minLength: 1
          pattern: "^[a-zA-Z0-9_-]+$"
          type: string
          example: us-region
        displayName:
          maxLength: 255
          minLength: 1
          type: string
          example: US Region
        provider:
          type: string
          example: wso2
        description:
          maxLength: 1023
          type: string
          example: Gateway environment in US Region
        isReadOnly:
          type: boolean
          readOnly: true
          example: false
        vhosts:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/VHost'
        endpointURIs:
          type: array
          items:
            $ref: '#/components/schemas/GatewayEnvironmentProtocolURI'
        additionalProperties:
          type: array
          items:
            $ref: '#/components/schemas/AdditionalProperty'
      example:
        endpointURIs:
        - protocol: default
          endpointURI: default
        - protocol: default
          endpointURI: default
        isReadOnly: false
        provider: wso2
        displayName: US Region
        name: us-region
        description: Gateway environment in US Region
        id: ece92bdc-e1e6-325c-b6f4-656208a041e9
        additionalProperties:
        - value: wso2
          key: Organization
        - value: wso2
          key: Organization
        vhosts:
        - httpContext: pets
          wssPort: 8099
          httpPort: 80
          wsPort: 9099
          host: mg.wso2.com
          httpsPort: 443
        - httpContext: pets
          wssPort: 8099
          httpPort: 80
          wsPort: 9099
          host: mg.wso2.com
          httpsPort: 443
    EnvironmentList:
      title: Environment List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Environments returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/Environment'
      example:
        count: 1
        list:
        - endpointURIs:
          - protocol: default
            endpointURI: default
          - protocol: default
            endpointURI: default
          isReadOnly: false
          provider: wso2
          displayName: US Region
          name: us-region
          description: Gateway environment in US Region
          id: ece92bdc-e1e6-325c-b6f4-656208a041e9
          additionalProperties:
          - value: wso2
            key: Organization
          - value: wso2
            key: Organization
          vhosts:
          - httpContext: pets
            wssPort: 8099
            httpPort: 80
            wsPort: 9099
            host: mg.wso2.com
            httpsPort: 443
          - httpContext: pets
            wssPort: 8099
            httpPort: 80
            wsPort: 9099
            host: mg.wso2.com
            httpsPort: 443
        - endpointURIs:
          - protocol: default
            endpointURI: default
          - protocol: default
            endpointURI: default
          isReadOnly: false
          provider: wso2
          displayName: US Region
          name: us-region
          description: Gateway environment in US Region
          id: ece92bdc-e1e6-325c-b6f4-656208a041e9
          additionalProperties:
          - value: wso2
            key: Organization
          - value: wso2
            key: Organization
          vhosts:
          - httpContext: pets
            wssPort: 8099
            httpPort: 80
            wsPort: 9099
            host: mg.wso2.com
            httpsPort: 443
          - httpContext: pets
            wssPort: 8099
            httpPort: 80
            wsPort: 9099
            host: mg.wso2.com
            httpsPort: 443
    VHost:
      title: Virtual Host
      required:
      - host
      type: object
      properties:
        host:
          maxLength: 255
          minLength: 1
          pattern: "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\\
            -]*[A-Za-z0-9])$"
          type: string
          example: mg.wso2.com
        httpContext:
          maxLength: 255
          minLength: 0
          pattern: "^\\/?([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])*$"
          type: string
          example: pets
        httpPort:
          type: integer
          example: 80
        httpsPort:
          type: integer
          example: 443
        wsPort:
          type: integer
          example: 9099
        wssPort:
          type: integer
          example: 8099
      example:
        httpContext: pets
        wssPort: 8099
        httpPort: 80
        wsPort: 9099
        host: mg.wso2.com
        httpsPort: 443
    AdditionalProperty:
      title: Additional Gateway Properties
      type: object
      properties:
        key:
          type: string
          example: Organization
        value:
          type: string
          example: wso2
      example:
        value: wso2
        key: Organization
    GatewayEnvironmentProtocolURI:
      title: Gateway Environment protocols and URIs
      required:
      - endpointURI
      - protocol
      type: object
      properties:
        protocol:
          type: string
          example: default
        endpointURI:
          type: string
          example: default
      example:
        protocol: default
        endpointURI: default
    PublishStatus:
      title: Usage publish status
      type: object
      properties:
        status:
          type: string
          description: Status of the usage publish request
          example: successfull
        message:
          type: string
          description: detailed message of the status
          example: Records published successfully
      example:
        message: Records published successfully
        status: successfull
    MonetizationUsagePublishInfo:
      title: Usage publish status
      type: object
      properties:
        state:
          type: string
          description: State of usage publish job
          example: RUNNING
        status:
          type: string
          description: Status of usage publish job
          example: SUCCESSFULL
        startedTime:
          type: string
          description: Timestamp of the started time of the Job
          example: "1599196134000"
        lastPublsihedTime:
          type: string
          description: Timestamp of the last published time
          example: "1599196134000"
      example:
        startedTime: "1599196134000"
        lastPublsihedTime: "1599196134000"
        state: RUNNING
        status: SUCCESSFULL
    Workflow:
      title: workflow
      required:
      - status
      type: object
      properties:
        status:
          type: string
          description: |
            This attribute declares whether this workflow task is approved or rejected.
          example: APPROVED
          enum:
          - APPROVED
          - REJECTED
        attributes:
          type: object
          additionalProperties:
            type: string
          description: |
            Custom attributes to complete the workflow task
          example: {}
        description:
          type: string
          example: Approve workflow request.
      example:
        description: Approve workflow request.
        attributes: {}
        status: APPROVED
    TenantInfo:
      title: Tenant information
      type: object
      properties:
        username:
          type: string
          example: john
        tenantDomain:
          type: string
          example: carbon.super
        tenantId:
          type: integer
          example: -1234
      description: The tenant information of the user
      example:
        tenantId: -1234
        tenantDomain: carbon.super
        username: john
    CustomUrlInfo:
      title: Custom url information
      type: object
      properties:
        tenantDomain:
          type: string
          example: carbon.super
        tenantAdminUsername:
          type: string
          example: john@foo.com
        enabled:
          type: boolean
          example: true
        devPortal:
          $ref: '#/components/schemas/CustomUrlInfo_devPortal'
      description: The custom url information of the tenant domain
      example:
        devPortal:
          url: http://example.com
        tenantAdminUsername: john@foo.com
        tenantDomain: carbon.super
        enabled: true
    APICategory:
      title: API Category
      required:
      - name
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 01234567-0123-0123-0123-012345678901
        name:
          maxLength: 255
          minLength: 1
          type: string
          example: Finance
        description:
          maxLength: 1024
          type: string
          example: Finance related APIs
        numberOfAPIs:
          type: integer
          readOnly: true
          example: 1
      example:
        numberOfAPIs: 1
        name: Finance
        description: Finance related APIs
        id: 01234567-0123-0123-0123-012345678901
    APICategoryList:
      title: API Category List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of API categories returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/APICategory'
      example:
        count: 1
        list:
        - numberOfAPIs: 1
          name: Finance
          description: Finance related APIs
          id: 01234567-0123-0123-0123-012345678901
        - numberOfAPIs: 1
          name: Finance
          description: Finance related APIs
          id: 01234567-0123-0123-0123-012345678901
    FileInfo:
      title: File Information including meta data
      type: object
      properties:
        relativePath:
          type: string
          description: relative location of the file (excluding the base context and
            host of the Admin API)
          example: api-categories/01234567-0123-0123-0123-012345678901/thumbnail
        mediaType:
          type: string
          description: media-type of the file
          example: image/jpeg
    Settings:
      title: Settings
      type: object
      properties:
        scopes:
          type: array
          items:
            type: string
        keyManagerConfiguration:
          type: array
          items:
            $ref: '#/components/schemas/Settings_keyManagerConfiguration'
        analyticsEnabled:
          type: boolean
          description: To determine whether analytics is enabled or not
          example: false
      example:
        analyticsEnabled: false
        keyManagerConfiguration:
        - defaultConsumerKeyClaim: azp
          endpointConfigurations:
          - null
          - null
          displayName: default
          configurations:
          - default: admin
            values:
            - {}
            - {}
            name: consumer_key
            multiple: true
            tooltip: Enter username to connect to key manager
            label: Consumer Key
            type: select
            required: true
            mask: true
          - default: admin
            values:
            - {}
            - {}
            name: consumer_key
            multiple: true
            tooltip: Enter username to connect to key manager
            label: Consumer Key
            type: select
            required: true
            mask: true
          defaultScopesClaim: scope
          type: default
        - defaultConsumerKeyClaim: azp
          endpointConfigurations:
          - null
          - null
          displayName: default
          configurations:
          - default: admin
            values:
            - {}
            - {}
            name: consumer_key
            multiple: true
            tooltip: Enter username to connect to key manager
            label: Consumer Key
            type: select
            required: true
            mask: true
          - default: admin
            values:
            - {}
            - {}
            name: consumer_key
            multiple: true
            tooltip: Enter username to connect to key manager
            label: Consumer Key
            type: select
            required: true
            mask: true
          defaultScopesClaim: scope
          type: default
        scopes:
        - scopes
        - scopes
    ScopeList:
      title: Scope Role Mapping List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of scopes available for tenant.
          readOnly: true
          example: 60
        list:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
      example:
        count: 60
        list:
        - roles:
          - admin
          - Internal/publisher
          name: apim:api_publish
          description: Publish API
          tag: publisher
        - roles:
          - admin
          - Internal/publisher
          name: apim:api_publish
          description: Publish API
          tag: publisher
    Scope:
      title: Scope Role
      type: object
      properties:
        tag:
          type: string
          description: |
            Portal name.
          example: publisher
        name:
          type: string
          description: |
            Scope name.
          example: apim:api_publish
        description:
          type: string
          description: |
            About scope.
          example: Publish API
        roles:
          type: array
          description: |
            Roles for the particular scope.
          example:
          - admin
          - Internal/publisher
          items:
            type: string
      example:
        roles:
        - admin
        - Internal/publisher
        name: apim:api_publish
        description: Publish API
        tag: publisher
    KeyManagerWellKnownResponse:
      title: Key Manager Well-Known Response.
      type: object
      properties:
        valid:
          type: boolean
          example: true
          default: false
        value:
          $ref: '#/components/schemas/KeyManager'
      example:
        valid: true
        value:
          clientRegistrationEndpoint: https://localhost:9444/keymanager-operations/dcr/register
          displayName: WSO2 Identity Server
          enableMapOAuthConsumerApps: false
          introspectionEndpoint: https://localhost:9444/oauth2/introspect
          scopeManagementEndpoint: https://wso2is.com:9444/api/identity/oauth2/v1.0/scopes
          description: This is a key manager for Developers
          type: WSO2-IS
          issuer: https://localhost:9444/services
          enabled: true
          tokenEndpoint: https://localhost:9444/oauth2/token
          consumerKeyClaim: azp
          scopesClaim: scp
          alias: https://localhost:9443/oauth2/token
          id: 01234567-0123-0123-0123-012345678901
          userInfoEndpoint: https://localhost:9444/oauth2/userinfo?schema=openid
          displayTokenEndpoint: https://localhost:9444/oauth2/token
          displayRevokeEndpoint: https://localhost:9444/oauth2/revoke
          endpoints:
          - name: token_endpoint
            value: https://localhost:9443/oauth2/token
          - name: token_endpoint
            value: https://localhost:9443/oauth2/token
          enableSelfValidationJWT: true
          enableTokenEncryption: false
          availableGrantTypes:
          - client_credentials
          - client_credentials
          claimMapping:
          - remoteClaim: http://idp.org/username
            localClaim: http://wso2.org/username
          - remoteClaim: http://idp.org/username
            localClaim: http://wso2.org/username
          revokeEndpoint: https://localhost:9444/oauth2/revoke
          certificates:
            type: JWKS
            value: value
          name: WSO2 Identity Server
          wellKnownEndpoint: ""
          authorizeEndpoint: https://localhost:9444/oauth2/authorize
          enableTokenHashing: false
          enableOAuthAppCreation: false
          additionalProperties:
            self_validate_jwt: true
            Username: admin
            Password: admin
          tokenValidation:
          - enable: false
            id: 0
            type: REFERENCE
            value: {}
          - enable: false
            id: 0
            type: REFERENCE
            value: {}
          tokenType: EXCHANGED
          enableTokenGeneration: true
    KeyManager:
      title: Key Manager
      required:
      - name
      - type
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: 01234567-0123-0123-0123-012345678901
        name:
          maxLength: 100
          minLength: 1
          type: string
          example: WSO2 Identity Server
        displayName:
          maxLength: 100
          type: string
          description: |
            display name of Key Manager to  show in UI
          example: WSO2 Identity Server
        type:
          maxLength: 45
          minLength: 1
          type: string
          example: WSO2-IS
        description:
          maxLength: 256
          type: string
          example: This is a key manager for Developers
        wellKnownEndpoint:
          type: string
          description: |
            Well-Known Endpoint of Identity Provider.
          example: ""
        introspectionEndpoint:
          type: string
          example: https://localhost:9444/oauth2/introspect
          deprecated: true
        clientRegistrationEndpoint:
          type: string
          example: https://localhost:9444/keymanager-operations/dcr/register
          deprecated: true
        tokenEndpoint:
          type: string
          example: https://localhost:9444/oauth2/token
          deprecated: true
        displayTokenEndpoint:
          type: string
          example: https://localhost:9444/oauth2/token
          deprecated: true
        revokeEndpoint:
          type: string
          example: https://localhost:9444/oauth2/revoke
          deprecated: true
        displayRevokeEndpoint:
          type: string
          example: https://localhost:9444/oauth2/revoke
          deprecated: true
        userInfoEndpoint:
          type: string
          example: https://localhost:9444/oauth2/userinfo?schema=openid
          deprecated: true
        authorizeEndpoint:
          type: string
          example: https://localhost:9444/oauth2/authorize
          deprecated: true
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/KeyManagerEndpoint'
        certificates:
          $ref: '#/components/schemas/KeyManager_certificates'
        issuer:
          type: string
          example: https://localhost:9444/services
        alias:
          type: string
          description: |
            The alias of Identity Provider.
            If the tokenType is EXCHANGED, the alias value should be inclusive in the audience values of the JWT token
          example: https://localhost:9443/oauth2/token
        scopeManagementEndpoint:
          type: string
          example: https://wso2is.com:9444/api/identity/oauth2/v1.0/scopes
          deprecated: true
        availableGrantTypes:
          type: array
          items:
            type: string
            example: client_credentials
        enableTokenGeneration:
          type: boolean
          example: true
        enableTokenEncryption:
          type: boolean
          example: false
          default: false
        enableTokenHashing:
          type: boolean
          example: false
          default: false
        enableMapOAuthConsumerApps:
          type: boolean
          example: false
          default: false
        enableOAuthAppCreation:
          type: boolean
          example: false
          default: false
        enableSelfValidationJWT:
          type: boolean
          example: true
          default: true
        claimMapping:
          type: array
          items:
            $ref: '#/components/schemas/ClaimMappingEntry'
        consumerKeyClaim:
          type: string
          example: azp
        scopesClaim:
          type: string
          example: scp
        tokenValidation:
          type: array
          items:
            $ref: '#/components/schemas/TokenValidation'
        enabled:
          type: boolean
          example: true
        additionalProperties:
          type: object
          properties: {}
          example:
            self_validate_jwt: true
            Username: admin
            Password: admin
        tokenType:
          type: string
          description: "The type of the tokens to be used (exchanged or without exchanged).\
            \ Accepted values are EXCHANGED, DIRECT and BOTH."
          example: EXCHANGED
          enum:
          - EXCHANGED
          - DIRECT
          - BOTH
          default: DIRECT
      example:
        clientRegistrationEndpoint: https://localhost:9444/keymanager-operations/dcr/register
        displayName: WSO2 Identity Server
        enableMapOAuthConsumerApps: false
        introspectionEndpoint: https://localhost:9444/oauth2/introspect
        scopeManagementEndpoint: https://wso2is.com:9444/api/identity/oauth2/v1.0/scopes
        description: This is a key manager for Developers
        type: WSO2-IS
        issuer: https://localhost:9444/services
        enabled: true
        tokenEndpoint: https://localhost:9444/oauth2/token
        consumerKeyClaim: azp
        scopesClaim: scp
        alias: https://localhost:9443/oauth2/token
        id: 01234567-0123-0123-0123-012345678901
        userInfoEndpoint: https://localhost:9444/oauth2/userinfo?schema=openid
        displayTokenEndpoint: https://localhost:9444/oauth2/token
        displayRevokeEndpoint: https://localhost:9444/oauth2/revoke
        endpoints:
        - name: token_endpoint
          value: https://localhost:9443/oauth2/token
        - name: token_endpoint
          value: https://localhost:9443/oauth2/token
        enableSelfValidationJWT: true
        enableTokenEncryption: false
        availableGrantTypes:
        - client_credentials
        - client_credentials
        claimMapping:
        - remoteClaim: http://idp.org/username
          localClaim: http://wso2.org/username
        - remoteClaim: http://idp.org/username
          localClaim: http://wso2.org/username
        revokeEndpoint: https://localhost:9444/oauth2/revoke
        certificates:
          type: JWKS
          value: value
        name: WSO2 Identity Server
        wellKnownEndpoint: ""
        authorizeEndpoint: https://localhost:9444/oauth2/authorize
        enableTokenHashing: false
        enableOAuthAppCreation: false
        additionalProperties:
          self_validate_jwt: true
          Username: admin
          Password: admin
        tokenValidation:
        - enable: false
          id: 0
          type: REFERENCE
          value: {}
        - enable: false
          id: 0
          type: REFERENCE
          value: {}
        tokenType: EXCHANGED
        enableTokenGeneration: true
    KeyManagerEndpoint:
      title: Key Manager Endpoint.
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
          example: token_endpoint
        value:
          type: string
          example: https://localhost:9443/oauth2/token
      example:
        name: token_endpoint
        value: https://localhost:9443/oauth2/token
    KeyManagerInfo:
      title: Key Manager Info
      required:
      - name
      - type
      type: object
      properties:
        id:
          type: string
          example: 01234567-0123-0123-0123-012345678901
        name:
          type: string
          example: WSO2 IS
        type:
          type: string
          example: IS
        description:
          type: string
          example: This is a key manager for Developers
        enabled:
          type: boolean
          example: true
        tokenType:
          type: string
          description: "The type of the tokens to be used (exchanged or without exchanged).\
            \ Accepted values are EXCHANGED, DIRECT and BOTH."
          example: EXCHANGED
          enum:
          - EXCHANGED
          - DIRECT
          - BOTH
          default: DIRECT
      example:
        name: WSO2 IS
        description: This is a key manager for Developers
        id: 01234567-0123-0123-0123-012345678901
        type: IS
        tokenType: EXCHANGED
        enabled: true
    KeyManagerConfiguration:
      title: Key Manager Configuration
      type: object
      properties:
        name:
          type: string
          example: consumer_key
        label:
          type: string
          example: Consumer Key
        type:
          type: string
          example: select
        required:
          type: boolean
          example: true
        mask:
          type: boolean
          example: true
        multiple:
          type: boolean
          example: true
        tooltip:
          type: string
          example: Enter username to connect to key manager
        default:
          type: object
          properties: {}
          example: admin
        values:
          type: array
          items:
            type: object
            properties: {}
            example: {}
      example:
        default: admin
        values:
        - {}
        - {}
        name: consumer_key
        multiple: true
        tooltip: Enter username to connect to key manager
        label: Consumer Key
        type: select
        required: true
        mask: true
    KeyManagerList:
      title: Key Manager List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Key managers returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/KeyManagerInfo'
      example:
        count: 1
        list:
        - name: WSO2 IS
          description: This is a key manager for Developers
          id: 01234567-0123-0123-0123-012345678901
          type: IS
          tokenType: EXCHANGED
          enabled: true
        - name: WSO2 IS
          description: This is a key manager for Developers
          id: 01234567-0123-0123-0123-012345678901
          type: IS
          tokenType: EXCHANGED
          enabled: true
    ClaimMappingEntry:
      title: Claim Mapping Configuration
      type: object
      properties:
        remoteClaim:
          type: string
          example: http://idp.org/username
        localClaim:
          type: string
          example: http://wso2.org/username
      example:
        remoteClaim: http://idp.org/username
        localClaim: http://wso2.org/username
    TokenValidation:
      title: Token handling Configuration
      type: object
      properties:
        id:
          type: integer
        enable:
          type: boolean
          example: false
          default: true
        type:
          type: string
          enum:
          - REFERENCE
          - JWT
          - CUSTOM
        value:
          type: object
          properties: {}
          example: {}
      example:
        enable: false
        id: 0
        type: REFERENCE
        value: {}
    ScopeSettings:
      title: Settings
      type: object
      properties:
        name:
          type: string
          example: apim:subscribe
      example:
        name: apim:subscribe
    AlertTypesList:
      title: Alert Types List
      type: object
      properties:
        count:
          type: integer
          description: The number of alerts
          example: 3
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertType'
      example:
        alerts:
        - name: AbnormalResponseTime
          id: "1"
        - name: AbnormalResponseTime
          id: "1"
        count: 3
    AlertType:
      title: Alert Type
      type: object
      properties:
        id:
          type: string
          description: The alert Id
          example: "1"
        name:
          type: string
          description: The name of the alert.
          example: AbnormalResponseTime
      example:
        name: AbnormalResponseTime
        id: "1"
    AlertsSubscription:
      title: Alerts Subscription
      type: object
      properties:
        alerts:
          type: array
          items:
            $ref: '#/components/schemas/AlertType'
        emailList:
          type: array
          items:
            type: string
            format: email
            example: admin@wso2.com
      example:
        alerts:
        - name: AbnormalResponseTime
          id: "1"
        - name: AbnormalResponseTime
          id: "1"
        emailList:
        - admin@wso2.com
        - admin@wso2.com
    BotDetectionAlertSubscriptionList:
      title: Bot Detection Alert Subscription List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Bot Detection Alert Subscriptions returned.
          example: 3
        list:
          type: array
          items:
            $ref: '#/components/schemas/BotDetectionAlertSubscription'
      example:
        count: 3
        list:
        - uuid: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
          email: abc@gmail.com
        - uuid: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
          email: abc@gmail.com
    BotDetectionAlertSubscription:
      title: Bot Detection Alert Subscription
      required:
      - email
      type: object
      properties:
        uuid:
          type: string
          description: UUID of the subscription
          example: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
        email:
          type: string
          description: email
          example: abc@gmail.com
      example:
        uuid: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
        email: abc@gmail.com
    WorkflowList:
      title: WorkflowList
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of workflow processes returned.
          example: 1
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
          example: /workflows?limit=1&offset=2&user=
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
          example: /workflows?limit=1&offset=0&user=
        list:
          type: array
          items:
            $ref: '#/components/schemas/WorkflowInfo'
      example:
        next: /workflows?limit=1&offset=2&user=
        previous: /workflows?limit=1&offset=0&user=
        count: 1
        list:
        - updatedTime: 2020-02-10T10:10:19.704Z
          workflowStatus: APPROVED
          createdTime: 2020-02-10T10:10:19.704Z
          description: "Approve application [APP1] creation request from application\
            \ creator - admin with throttling tier - 10MinPer"
          workflowType: APPLICATION_CREATION
          referenceId: 5871244b-d6f3-466e-8995-8accd1e64303
          properties: {}
        - updatedTime: 2020-02-10T10:10:19.704Z
          workflowStatus: APPROVED
          createdTime: 2020-02-10T10:10:19.704Z
          description: "Approve application [APP1] creation request from application\
            \ creator - admin with throttling tier - 10MinPer"
          workflowType: APPLICATION_CREATION
          referenceId: 5871244b-d6f3-466e-8995-8accd1e64303
          properties: {}
    WorkflowInfo:
      title: Workflow info object with basic workflow details
      type: object
      properties:
        workflowType:
          type: string
          description: |
            Type of the Workflow Request. It shows which type of request is it.
          example: APPLICATION_CREATION
          enum:
          - APPLICATION_CREATION
          - SUBSCRIPTION_CREATION
          - USER_SIGNUP
          - APPLICATION_REGISTRATION_PRODUCTION
          - APPLICATION_REGISTRATION_SANDBOX
          - APPLICATION_DELETION
          - API_STATE
          - API_PRODUCT_STATE
          - SUBSCRIPTION_DELETION
          - SUBSCRIPTION_UPDATE
        workflowStatus:
          type: string
          description: |
            Show the Status of the the workflow request whether it is approved or created.
          example: APPROVED
          enum:
          - APPROVED
          - CREATED
        createdTime:
          type: string
          description: |
            Time of the the workflow request created.
          example: 2020-02-10T10:10:19.704Z
        updatedTime:
          type: string
          description: |
            Time of the the workflow request updated.
          example: 2020-02-10T10:10:19.704Z
        referenceId:
          type: string
          description: |
            Workflow external reference is used to identify the workflow requests uniquely.
          example: 5871244b-d6f3-466e-8995-8accd1e64303
        properties:
          type: object
          properties: {}
          example: {}
        description:
          type: string
          description: |
            description is a message with basic details about the workflow request.
          example: "Approve application [APP1] creation request from application creator\
            \ - admin with throttling tier - 10MinPer"
      example:
        updatedTime: 2020-02-10T10:10:19.704Z
        workflowStatus: APPROVED
        createdTime: 2020-02-10T10:10:19.704Z
        description: "Approve application [APP1] creation request from application\
          \ creator - admin with throttling tier - 10MinPer"
        workflowType: APPLICATION_CREATION
        referenceId: 5871244b-d6f3-466e-8995-8accd1e64303
        properties: {}
    WorkflowResponse:
      title: workflow Response
      required:
      - workflowStatus
      type: object
      properties:
        workflowStatus:
          type: string
          description: |
            This attribute declares whether this workflow task is approved or rejected.
          example: APPROVED
          enum:
          - CREATED
          - APPROVED
          - REJECTED
          - REGISTERED
        jsonPayload:
          type: string
          description: |
            Attributes that returned after the workflow execution
    BotDetectionDataList:
      title: Bot Detection Data List
      type: object
      properties:
        count:
          type: integer
          description: |
            Number of Bot Detection Data returned.
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/BotDetectionData'
      example:
        count: 1
        list:
        - apiMethod: GET
          messageBody: <soapenv:Body xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>
          clientIp: 127.0.0.1
          messageID: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
          headerSet: "[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]"
          recordedTime: 1591734138413
        - apiMethod: GET
          messageBody: <soapenv:Body xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>
          clientIp: 127.0.0.1
          messageID: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
          headerSet: "[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]"
          recordedTime: 1591734138413
    BotDetectionData:
      title: Bot Detection Data
      type: object
      properties:
        recordedTime:
          type: integer
          description: The time of detection
          format: int64
          example: 1591734138413
        messageID:
          type: string
          description: The message ID
          example: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
        apiMethod:
          type: string
          description: The api method
          example: GET
        headerSet:
          type: string
          description: The header set
          example: "[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]"
        messageBody:
          type: string
          description: The content of the message body
          example: <soapenv:Body xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>
        clientIp:
          type: string
          description: The IP of the client
          example: 127.0.0.1
      example:
        apiMethod: GET
        messageBody: <soapenv:Body xmlns:soapenv=\"http://www.w3.org/2003/05/soap-envelope\"/>
        clientIp: 127.0.0.1
        messageID: urn:uuid:1ed6d2de-29df-4fed-a96a-46d2329dce65
        headerSet: "[Accept=*/*, Host=localhost:8243, User-Agent=curl/7.58.0]"
        recordedTime: 1591734138413
    RoleAliasList:
      title: Role alias list
      type: object
      properties:
        count:
          type: integer
          description: The number of role aliases
          example: 1
        list:
          type: array
          items:
            $ref: '#/components/schemas/RoleAlias'
      example:
        count: 1
        list:
        - role: Internal/subscriber
          aliases:
          - Subscriber
          - Internal/subscriber
        - role: Internal/subscriber
          aliases:
          - Subscriber
          - Internal/subscriber
    RoleAlias:
      title: Role alias
      type: object
      properties:
        role:
          type: string
          description: The original role
          example: Internal/subscriber
        aliases:
          type: array
          description: The role mapping for role alias
          example:
          - Subscriber
          - Internal/subscriber
          items:
            type: string
      example:
        role: Internal/subscriber
        aliases:
        - Subscriber
        - Internal/subscriber
    Pagination:
      title: Pagination
      type: object
      properties:
        offset:
          type: integer
          example: 0
        limit:
          type: integer
          example: 1
        total:
          type: integer
          example: 10
        next:
          type: string
          description: |
            Link to the next subset of resources qualified.
            Empty if no more resources are to be returned.
            example: ""
        previous:
          type: string
          description: |
            Link to the previous subset of resources qualified.
            Empty if current subset is the first subset returned.
            example: ""
      example:
        next: next
        total: 10
        offset: 0
        previous: previous
        limit: 1
    policies_import_body:
      required:
      - file
      properties:
        file:
          type: string
          description: Json File
          format: binary
    tenanttheme_body:
      required:
      - file
      properties:
        file:
          type: string
          description: |
            Zip archive consisting of tenant theme configuration
          format: binary
    keymanagers_discover_body:
      properties:
        url:
          type: string
          description: Well-Known Endpoint
        type:
          type: string
          description: |
            Key Manager Type
          default: "false"
    CustomUrlInfo_devPortal:
      type: object
      properties:
        url:
          type: string
          example: http://example.com
      example:
        url: http://example.com
    Settings_keyManagerConfiguration:
      type: object
      properties:
        type:
          type: string
          example: default
        displayName:
          type: string
          example: default
        defaultConsumerKeyClaim:
          type: string
          example: azp
        defaultScopesClaim:
          type: string
          example: scope
        configurations:
          type: array
          items:
            $ref: '#/components/schemas/KeyManagerConfiguration'
        endpointConfigurations:
          type: array
          items:
            $ref: '#/components/schemas/KeyManagerConfiguration'
      example:
        defaultConsumerKeyClaim: azp
        endpointConfigurations:
        - null
        - null
        displayName: default
        configurations:
        - default: admin
          values:
          - {}
          - {}
          name: consumer_key
          multiple: true
          tooltip: Enter username to connect to key manager
          label: Consumer Key
          type: select
          required: true
          mask: true
        - default: admin
          values:
          - {}
          - {}
          name: consumer_key
          multiple: true
          tooltip: Enter username to connect to key manager
          label: Consumer Key
          type: select
          required: true
          mask: true
        defaultScopesClaim: scope
        type: default
    KeyManager_certificates:
      type: object
      properties:
        type:
          type: string
          enum:
          - JWKS
          - PEM
        value:
          type: string
      example:
        type: JWKS
        value: value
  responses:
    BadRequest:
      description: Bad Request. Invalid request or validation error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Bad Request
            description: Invalid request or validation error
            moreInfo: ""
            error: []
    Conflict:
      description: Conflict. Specified resource already exists.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 409
            message: Conflict
            description: Specified resource already exists
            moreInfo: ""
            error: []
    Forbidden:
      description: Forbidden. The request must be conditional but no condition has
        been specified.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
            description: The request must be conditional but no condition has been
              specified
            moreInfo: ""
            error: []
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 500
            message: Internal Server Error
            description: The server encountered an internal error. Please contact
              administrator.
            moreInfo: ""
            error: []
    NotAcceptable:
      description: Not Acceptable. The requested media type is not supported.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 406
            message: Not Acceptable
            description: The requested media type is not supported
            moreInfo: ""
            error: []
    NotFound:
      description: Not Found. The specified resource does not exist.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not Found
            description: The specified resource does not exist
            moreInfo: ""
            error: []
    PayloadTooLarge:
      description: Payload Too Large. Request entity is larger than limits defined
        by server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 413
            message: Payload Too Large
            description: Request entity is larger than limits defined by server
            moreInfo: ""
            error: []
    PreconditionFailed:
      description: Precondition Failed. The request has not been performed because
        one of the preconditions is not met.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 412
            message: Precondition Failed
            description: The request has not been performed because one of the preconditions
              is not met
            moreInfo: ""
            error: []
    Unauthorized:
      description: Unauthorized. The user is not authorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Unauthorized
            description: The user is not authorized
            moreInfo: ""
            error: []
    UnsupportedMediaType:
      description: Unsupported Media Type. The entity of the request was not in a
        supported format.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 415
            message: Unsupported media type
            description: The entity of the request was not in a supported format
            moreInfo: ""
            error: []
  parameters:
    If-None-Match:
      name: If-None-Match
      in: header
      description: |
        Validator for conditional requests; based on the ETag of the formerly retrieved
        variant of the resource.
      required: false
      style: simple
      explode: false
      schema:
        type: string
    requestedTenant:
      name: X-WSO2-Tenant
      in: header
      description: |
        For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be
          retirieved from.
      required: false
      style: simple
      explode: false
      schema:
        type: string
    sortBy:
      name: sortBy
      in: query
      description: |
        Criteria for sorting.
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - apiName
        - version
        - createdTime
        - status
        default: createdTime
    sortOrder:
      name: sortOrder
      in: query
      description: |
        Order of sorting(ascending/descending).
      required: false
      style: form
      explode: true
      schema:
        type: string
        enum:
        - asc
        - desc
        default: desc
    username:
      name: username
      in: query
      description: |
        username of the new application owner
      required: true
      style: form
      explode: true
      schema:
        type: string
    scopeName:
      name: scopeName
      in: path
      description: |
        Base64 URL encoded value of the scope name to be validated
      required: true
      style: simple
      explode: false
      schema:
        type: string
    environmentId:
      name: environmentId
      in: path
      description: |
        Environment UUID (or Environment name defined in config)
      required: true
      style: simple
      explode: false
      schema:
        type: string
    policyId:
      name: policyId
      in: path
      description: |
        Thorttle policy UUID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    ruleId:
      name: ruleId
      in: path
      description: |
        Custom rule UUID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    applicationId:
      name: applicationId
      in: path
      description: |
        Application UUID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    conditionId:
      name: conditionId
      in: path
      description: |
        Blocking condition identifier
      required: true
      style: simple
      explode: false
      schema:
        type: string
    Accept:
      name: Accept
      in: header
      description: |
        Media types acceptable for the response. Default is application/json.
      required: false
      style: simple
      explode: false
      schema:
        type: string
        default: application/json
    Content-Type:
      name: Content-Type
      in: header
      description: |
        Media type of the entity in the body. Default is application/json.
      required: true
      style: simple
      explode: false
      schema:
        type: string
        default: application/json
    limit:
      name: limit
      in: query
      description: |
        Maximum size of resource array to return.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 25
    offset:
      name: offset
      in: query
      description: |
        Starting point within the complete list of items qualified.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: 0
    user:
      name: user
      in: query
      description: |
        username of the application creator
      required: false
      style: form
      explode: true
      schema:
        type: string
    workflowReferenceId-Q:
      name: workflowReferenceId
      in: query
      description: |
        Workflow reference id
      required: true
      style: form
      explode: true
      schema:
        type: string
    apiCategoryId:
      name: apiCategoryId
      in: path
      description: |
        API Category UUID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    keyManagerId:
      name: keyManagerId
      in: path
      description: |
        Key Manager UUID
      required: true
      style: simple
      explode: false
      schema:
        type: string
    roleId:
      name: roleId
      in: path
      description: |
        The Base 64 URL encoded role name with domain. If the given role is in PRIMARY user-store, role ID should be
        derived as Base64URLEncode(role-name). If the given role is in secondary user-store, role ID should be
        derived as Base64URLEncode({user-store-name}/{role-name}).
      required: true
      style: simple
      explode: false
      schema:
        type: string
  securitySchemes:
    OAuth2Security:
      type: oauth2
      flows:
        password:
          tokenUrl: https://localhost:9443/oauth2/token
          scopes:
            openid: Authorize access to user details
            apim:policies_import_export: Export and import policies related operations
            apim:admin: Manage all admin operations
            apim:tier_view: View throttling policies
            apim:tier_manage: Update and delete throttling policies
            apim:bl_view: View deny policies
            apim:bl_manage: Update and delete deny policies
            apim:mediation_policy_view: View mediation policies
            apim:mediation_policy_create: Create and update mediation policies
            apim:app_owner_change: Retrieve and manage applications
            apim:app_import_export: Import and export applications related operations
            apim:api_import_export: Import and export APIs related operations
            apim:api_product_import_export: Import and export API Products related
              operations
            apim:environment_manage: Manage gateway environments
            apim:environment_read: Retrieve gateway environments
            apim:monetization_usage_publish: Retrieve and publish Monetization related
              usage records
            apim:api_workflow_approve: Manage workflows
            apim:bot_data: Retrieve bot detection data
            apim:tenantInfo: Retrieve tenant related information
            apim:tenant_theme_manage: Manage tenant themes
            apim:admin_operations: Manage API categories and Key Managers related
              operations
            apim:admin_settings: Retrieve admin settings
            apim:admin_alert_manage: Manage admin alerts
            apim:api_workflow_view: Retrive workflow requests
            apim:scope_manage: Manage system scopes
            apim:role_manage: Manage system roles
            apim:admin_application_view: View Applications
